/* Generated by re2c 4.0.2 on Sun Feb 16 08:07:23 2025 */
/* ============== Do not edit this file ============== */


//	TextEditor - A syntax highlighting text editor for ImGui
//	Copyright (c) 2024-2025 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	tokenizeMarkdown
//

static TextEditor::Iterator tokenizeMarkdown(TextEditor::Iterator start, TextEditor::Iterator end, TextEditor::Color& color) {
	TextEditor::Iterator i = start;
	TextEditor::Iterator marker;

	
{
	ImWchar yych;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '!': goto yy3;
		case '#': goto yy4;
		case '*': goto yy6;
		case '+': goto yy7;
		case '-': goto yy8;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy10;
		case ':':
		case '|': goto yy11;
		case '<': goto yy12;
		case '[': goto yy13;
		case '`': goto yy14;
		case '~': goto yy15;
		default:
			if (i >= end) goto yy37;
			goto yy1;
	}
yy1:
	++i;
yy2:
	{ return start; }
yy3:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '[': goto yy16;
		default: goto yy2;
	}
yy4:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '\n': goto yy5;
		default:
			if (i >= end) goto yy5;
			goto yy4;
	}
yy5:
	{
			color = TextEditor::Color::declaration;
			return i;
		}
yy6:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ' ': goto yy11;
		case '*': goto yy20;
		default:
			if (i >= end) goto yy2;
			goto yy18;
	}
yy7:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ' ': goto yy11;
		default: goto yy2;
	}
yy8:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ' ': goto yy11;
		default: goto yy9;
	}
yy9:
	{
			color = TextEditor::Color::punctuation;
			return i;
		}
yy10:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '.': goto yy21;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy22;
		default: goto yy2;
	}
yy11:
	++i;
	goto yy9;
yy12:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy23;
		default: goto yy2;
	}
yy13:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	if (yych <= 0x00) {
		if (i >= end) goto yy2;
		goto yy16;
	}
	goto yy17;
yy14:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	if (yych <= 0x00) {
		if (i >= end) goto yy2;
		goto yy25;
	}
	goto yy26;
yy15:
	++i;
	marker = i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '~': goto yy28;
		default: goto yy2;
	}
yy16:
	++i;
	yych = i < end ? *i : 0;
yy17:
	switch (yych) {
		case ']': goto yy24;
		default:
			if (i >= end) goto yy19;
			goto yy16;
	}
yy18:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ' ': goto yy19;
		case '*': goto yy29;
		default:
			if (i >= end) goto yy19;
			goto yy18;
	}
yy19:
	i = marker;
	goto yy2;
yy20:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '*': goto yy19;
		default:
			if (i >= end) goto yy19;
			goto yy30;
	}
yy21:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ' ': goto yy11;
		default: goto yy19;
	}
yy22:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '.': goto yy21;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': goto yy22;
		default: goto yy19;
	}
yy23:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '>': goto yy31;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z': goto yy23;
		default: goto yy19;
	}
yy24:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '(': goto yy32;
		default: goto yy19;
	}
yy25:
	++i;
	yych = i < end ? *i : 0;
yy26:
	switch (yych) {
		case '`': goto yy27;
		default:
			if (i >= end) goto yy19;
			goto yy25;
	}
yy27:
	++i;
	{
			color = TextEditor::Color::string;
			return i;
		}
yy28:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '~': goto yy19;
		default:
			if (i >= end) goto yy19;
			goto yy33;
	}
yy29:
	++i;
	{
			color = TextEditor::Color::number;
			return i;
		}
yy30:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '*': goto yy34;
		default:
			if (i >= end) goto yy19;
			goto yy30;
	}
yy31:
	++i;
	{
			color = TextEditor::Color::keyword;
			return i;
		}
yy32:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case ')': goto yy35;
		default:
			if (i >= end) goto yy19;
			goto yy32;
	}
yy33:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '~': goto yy36;
		default:
			if (i >= end) goto yy19;
			goto yy33;
	}
yy34:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '*': goto yy29;
		default: goto yy19;
	}
yy35:
	++i;
	{
			color = TextEditor::Color::identifier;
			return i;
		}
yy36:
	++i;
	yych = i < end ? *i : 0;
	switch (yych) {
		case '~': goto yy29;
		default: goto yy19;
	}
yy37:
	{ return start; }
}

}


//
//	TextEditor::Language::Markdown
//

const TextEditor::Language* TextEditor::Language::Markdown() {
	static bool initialized = false;
	static TextEditor::Language language;

	if (!initialized) {
		language.name = "Markdown";
		language.commentStart = "<!--";
		language.commentEnd = "-->";

		language.customTokenizer = tokenizeMarkdown;
		initialized = true;
	}

	return &language;
}
