/* ============== Do not edit this file ============== */


//	TextEditor - A syntax highlighting text editor for ImGui
//	Copyright (c) 2024-2025 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	getPythonStyleNumber
//

static TextEditor::Iterator getPythonStyleNumber(TextEditor::Iterator start, TextEditor::Iterator end) {
	TextEditor::Iterator i = start;
	TextEditor::Iterator marker;

	/*!re2c
		re2c:api = custom;
		re2c:api:style = free-form;
		re2c:define:YYCTYPE = ImWchar;
		re2c:define:YYPEEK = "i < end ? *i : 0";
		re2c:define:YYSKIP = "++i;";
		re2c:define:YYBACKUP = "marker = i;";
		re2c:define:YYRESTORE = "i = marker;";
		re2c:define:YYLESSTHAN = "i >= end";
		re2c:yyfill:enable = 0;
		re2c:eof = 0;

		digit        = [0-9];
		decDigit     = [0-9_];
		binDigit     = [01_];
		octDigit     = [0-7_];
		hexDigit     = [0-9a-fA-F_];

		decInteger   = digit decDigit*;
		binInteger   = ("0b" | "0B") binDigit+;
		octInteger   = ("0o" | "0O") octDigit+;
		hexInteger   = ("0x" | "0X") hexDigit+;

		digitPart    = digit decDigit*;
		fraction     = "." digitPart;
		exponent     = [eE+-] digitPart;
		imaginary    = [jJ];

		float        = digitPart fraction? exponent? imaginary?;
		number       = decInteger | binInteger | octInteger | hexInteger | float;

		number {
			return i;
		}

		$ { return start; }
		* { return start; }
	*/
}


//
//	TextEditor::Language::Python
//

const TextEditor::Language& TextEditor::Language::Python() {
	static bool initialized = false;
	static TextEditor::Language language;

	if (!initialized) {
		language.name = "Python";
		language.singleLineComment = "#";
		language.hasSingleQuotedStrings = true;
		language.hasDoubleQuotedStrings = true;
		language.otherStringStart = "\"\"\"";
		language.otherStringEnd = "\"\"\"";
		language.otherStringAltStart = "'''";
		language.otherStringAltEnd = "'''";
		language.stringEscape = '\\';

		static const char* const keywords[] = {
			"False", "await", "else", "import", "pass", "None", "break", "except", "in", "raise", "True",
			"class", "finally", "is", "return", "and", "continue", "for", "lambda", "try", "as", "def",
			"from", "nonlocal", "while", "assert", "del", "global", "not", "with", "async", "elif",
			"if", "or", "yield"
		};

		for (auto& keyword : keywords) { language.keywords.insert(keyword); }

		language.isPunctuation = isCStylePunctuation;
		language.getIdentifier = getCStyleIdentifier;
		language.getNumber = getPythonStyleNumber;
		initialized = true;
	}

	return language;
}
