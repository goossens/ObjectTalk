module	::= statement*

statement ::= expression ";"
| block
| "var" name ("=" expression)? ";"
| "class" name ":" expression block
| "function" name "(" ((name ("," name)*)?) ")" block
| "if" expression block ("elif" expression block)* ("else" block)?
| "while" expression block
| "do" block "while" expression ";"
| "for" name "in" expression block
| "throw" expression ";"
| "try" block "catch" name block
| "return" expression ";"

block ::= "{" statement* "}"

expression ::= conditional (
	"=" expression |
	"*=" expression |
	"/=" expression |
	"%=" expression |
	"+=" expression |
	"-=" expression |
	"<<=" expression |
	">>=" expression |
	"|=" expression |
	"^=" expression |
	"&=" expression)*

conditional ::= or ("?" expression ":" expression)?

or ::= and ("||" and)*
and ::= bytewise-or ("&&" bytewise-or)*

bytewise-or ::= bytewise-xor ("|" bytewise-xor)*
bytewise-xor ::= bytewise-and ("^" bytewise-and)*
bytewise-and ::= equal ("&" equal)*

equal ::= relation ("==" relation  | "!=" relation)*
relation ::= shift ("<" shift | "<=" shift | ">" shift | ">=" shift | "in" shift | "not in" shift)*

shift ::= addition ("<<" addition | ">>" addition)*
addition ::= multiplication ("+" multiplication | "-" multiplication)*
multiplication ::= prefix ("*" prefix | "/" prefix | "%" prefix)*

prefix ::= ("-" | "+" | "!" | "^" | "++" | "--")? postfix
postfix ::= primary ("[" expression "]" | "(" expression ("," expression)* ")" | "." name  | "::" name | "++" | "--")*

primary ::= "(" expression ")"
| "[" expression ("," expression)* "]"
| "{" string ":" expression ("," string ":" expression)* "}"
| integer
| real
| string
| function
| name

integer ::= [-+]? [0-9]+
real ::= [-+]? [0-9]+.[0-9]+ ([Ee] [-+]? [0-9]+)?
string ::= '"' (Char - ["\] | '\' ["\bfnrt] | "\u"  [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f])* '"'
function ::= "function" "(" ((name ("," name)*)?) ")" block
name ::= [a-zA-Z_][a-zA-Z0-9_]*
