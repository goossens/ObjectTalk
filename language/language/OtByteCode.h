//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2024 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.



#pragma once


//
//	Include files
//

#include <algorithm>
#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include "OtException.h"
#include "OtIdentifier.h"
#include "OtInternal.h"
#include "OtObject.h"
#include "OtSource.h"
#include "OtStatement.h"
#include "OtSymbol.h"


//
//	Forward declarations
//

class OtMemberReferenceClass;
using OtMemberReference = OtObjectPointer<OtMemberReferenceClass>;

class OtStackReferenceClass;
using OtStackReference = OtObjectPointer<OtStackReferenceClass>;


//
//	OtByteCode
//

class OtByteCodeClass;
using OtByteCode = OtObjectPointer<OtByteCodeClass>;

class OtByteCodeClass : public OtInternalClass {
public:
	// possible opcodes
	enum class Opcode {
		// opcodes generated by the compiler
		statement,
		push,
		pushNull,
		pop,
		popCount,
		dup,
		swap,
		move,
		jump,
		jumpTrue,
		jumpFalse,
		member,
		super,
		method,
		exit,
		pushTry,
		popTry,

		// opcodes generated by the optimizer
		pushStackObject,
		pushStackMember,
		pushObjectMember,
		pushMember,
		assignStack,
		assignMember
	};

	// constructors
	OtByteCodeClass() = default;
	OtByteCodeClass(OtSource s, OtID i) : source(s), id(i) {}

	// add compiler opcodes
	inline void statement() { emitOpcode(Opcode::statement); }
	inline void push(OtObject value) { emitOpcode(Opcode::push); emitConstant(value); }
	inline void pushNull() { emitOpcode(Opcode::pushNull); }
	inline void pop() { emitOpcode(Opcode::pop); }
	inline void pop(size_t count) { emitOpcode(Opcode::popCount); emitNumber(count); }
	inline void dup() { emitOpcode(Opcode::dup); }
	inline void swap() { emitOpcode(Opcode::swap); }
	inline void move(size_t count) { emitOpcode(Opcode::move); emitNumber(count); }
	inline size_t jump(size_t offset) { emitOpcode(Opcode::jump); return emitJump(offset); }
	inline size_t jumpTrue(size_t offset) { emitOpcode(Opcode::jumpTrue); return emitJump(offset); }
	inline size_t jumpFalse(size_t offset) { emitOpcode(Opcode::jumpFalse); return emitJump(offset); }
	inline void member(OtID id) { emitOpcode(Opcode::member); emitID(id); }
	inline void method(OtID id, size_t count) { emitOpcode(Opcode::method); emitID(id); emitNumber(count); }
	inline void super(OtID id) { emitOpcode(Opcode::super); emitID(id); }
	inline void exit() { emitOpcode(Opcode::exit); }
	inline size_t pushTry() { emitOpcode(Opcode::pushTry); return emitJump(0); }
	inline void pushTry(size_t offset) { emitOpcode(Opcode::pushTry); emitJump(offset); }
	inline void popTry() { emitOpcode(Opcode::popTry); }

	// patch jump offset
	inline void patchJump(size_t jump) { jumps[jump] = bytecode.size(); }

	// add optimizer opcodes
	inline void pushStackObject(size_t slot) { emitOpcode(Opcode::pushStackObject); emitNumber(slot); }
	inline void pushStackMember(size_t slot, OtID member) { emitOpcode(Opcode::pushStackMember); emitNumber(slot); emitID(member); }
	inline void pushObjectMember(OtObject object, OtID member) { emitOpcode(Opcode::pushObjectMember); emitConstant(object); emitID(member); }
	inline void pushMember(OtID member) { emitOpcode(Opcode::pushMember); emitID(member); }
	inline void assignStack(size_t slot) { emitOpcode(Opcode::assignStack); emitNumber(slot); }
	inline void assignMember(OtObject object, OtID member) { emitOpcode(Opcode::assignMember); emitConstant(object); emitID(member); }

	// get current code size
	inline size_t size() { return bytecode.size(); }

	// get opcode
	inline Opcode getOpcode(size_t& pc) {
		return static_cast<Opcode>(bytecode[pc++]);
	}

	// get variable length number
	inline size_t getNumber(size_t& pc) {
		size_t result = 0;
		size_t shift = 0;

		while (true) {
			auto byte = bytecode[pc++];
			result |= size_t(byte & 0x7f) << shift;

			if (!(byte & 0x80)) {
				break;
			}

			shift += 7;
		}

		return result;
	}

	// get an identifier
	inline OtID getID(size_t& pc) { return (OtID) getNumber(pc); }

	// disassemble the bytecode
	std::string disassemble();

	// copy from other bytecode
	void copyOpcode(OtByteCode bytecode, size_t pc);

	// add statement reference
	inline void addStatement(size_t sourceStart, size_t sourceEnd, size_t opcodeStart, size_t opcodeEnd) {
		statements.emplace_back(sourceStart, sourceEnd, opcodeStart, opcodeEnd);
	}

	// add a new symbol located on the heap
	inline void addSymbol(const OtSymbol& symbol) {
		symbols.emplace_back(symbol);
	}

	// get code parts
	inline std::string getModule() { return source->getModule(); }
	inline OtSource& getSource() { return source; }
	inline OtID getID() { return id; }
	inline uint8_t* getCode() { return bytecode.data(); }
	inline OtObject& getConstant(size_t index) { return constants[index]; }
	inline std::vector<size_t>& getJumps() { return jumps; }
	inline size_t getJump(size_t jump) { return jumps[jump]; }
	inline std::vector<OtStatement>& getStatements() { return statements; }
	inline std::vector<OtSymbol>& getSymbols() { return symbols; }

	// bytecode introspection
	size_t getOpcodeSize(size_t pc);

	bool isPush(size_t pc, OtObject& object);
	bool isPushStackReference(size_t pc, OtStackReference& reference);
	bool isPushMemberReference(size_t pc, OtMemberReference& reference);
	bool isSwap(size_t pc);
	bool isMember(size_t pc, OtID& member);
	bool isMethodDeref(size_t pc);
	bool isMethodAssign(size_t pc);
	bool isAnyJump(size_t pc, size_t& offset);

	size_t getStatementStart(size_t pc);
	size_t getStatementEnd(size_t pc);
	size_t getLineNumber(size_t pc);
	std::string getStatementSourceCode(size_t pc);

	std::vector<OtSymbol> getUsedSymbols(size_t pc);
	std::vector<std::string> getUsedSymbolNames(size_t pc);

	// get type definition
	static OtType getMeta();

private:
	// emit parts to bytecode
	inline void emitOpcode(Opcode opcode) {
		bytecode.emplace_back(static_cast<uint8_t>(opcode));
	}

	inline void emitConstant(OtObject constant) {
		auto index = constants.size();
		constants.emplace_back(constant);
		emitNumber(index);
	}

	inline size_t emitJump(size_t offset) {
		auto jump = jumps.size();
		jumps.emplace_back(offset);
		emitNumber(jump);
		return jump;
	}

	inline void emitID(OtID id) { emitNumber((size_t) id); }

	inline void emitNumber(size_t number) {
		while (number > 0x7f) {
			bytecode.emplace_back(((uint8_t)(number & 0x7f)) | 0x80);
			number >>= 7;
		}

		bytecode.emplace_back((uint8_t) number);
	}

	// properties
	OtSource source;
	OtID id;
	std::vector<uint8_t> bytecode;
	std::vector<OtObject> constants;
	std::vector<size_t> jumps;
	std::vector<OtStatement> statements;
	std::vector<OtSymbol> symbols;

	// internal method identifiers used by compiler
	OtID assignID = OtIdentifier::create("__assign__");
	OtID dereferenceID = OtIdentifier::create("__deref__");
};
