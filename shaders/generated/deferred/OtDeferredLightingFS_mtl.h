static const uint8_t OtDeferredLightingFS_mtl[18592] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x13, 0x73, // FSH.o.><....*..s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap0Sampl
	0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, // er...........s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // hadowMap0Texture
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, // ...........s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, // dowMap1Sampler..
	0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // .........s_shado
	0x77, 0x4d, 0x61, 0x70, 0x31, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, // wMap1Texture....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // .......s_shadowM
	0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // ap2Sampler......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // .....s_shadowMap
	0x32, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // 2Texture........
	0x00, 0x00, 0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, // ...s_shadowMap3S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x13, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x54, 0x65, 0x78, // .s_shadowMap3Tex
	0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, // ture...........u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // _shadow.........
	0x00, 0x19, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, // ..u_shadowViewPr
	0x6f, 0x6a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x14, 0x04, 0x20, 0x00, 0x10, // ojTransform.. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // ......s_lighting
	0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, // AlbedoTextureSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, // pler...........s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, // _lightingAlbedoT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, // extureTexture...
	0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // ........s_lighti
	0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // ngNormalTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x1e, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, // .s_lightingNorma
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, // lTextureTexture.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, // ..........s_ligh
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, // tingPbrTextureSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, // mpler...........
	0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, // s_lightingPbrTex
	0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, // tureTexture.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // ..... s_lighting
	0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // EmissiveTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x69, 0x73, 0x73, //  s_lightingEmiss
	0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // iveTextureTextur
	0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x73, 0x5f, 0x6c, 0x69, // e...........s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, // ghtingDepthTextu
	0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, // reSampler.......
	0x00, 0x00, 0x00, 0x1d, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, // ....s_lightingDe
	0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // pthTextureTextur
	0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x69, 0x62, // e...........s_ib
	0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, // lBrdfLutSampler.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, // ..........s_iblB
	0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, // rdfLutTexture...
	0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, // ........s_iblIrr
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // adianceMapSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x69, 0x62, // r...........s_ib
	0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x65, // lIrradianceMapTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, // xture...........
	0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, // s_iblEnvironment
	0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // MapSampler......
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, // .....s_iblEnviro
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, // nmentMapTexture.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, // ..........u_invV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x14, 0x01, // iewProjUniform..
	0x90, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, // .........u_light
	0x69, 0x6e, 0x67, 0x12, 0x03, 0x20, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x75, 0x5f, // ing.. ........u_
	0x76, 0x69, 0x65, 0x77, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x14, 0x01, 0x50, 0x01, 0x04, // viewUniform..P..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x12, 0x01, 0xd0, 0x01, 0x01, // ......u_ibl.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // ......s_shadowMa
	0x70, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x73, // p0...........s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // hadowMap1.......
	0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, // ....s_shadowMap2
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x73, 0x68, 0x61, // ...........s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // dowMap3.........
	0x00, 0x17, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, // ..s_lightingAlbe
	0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // doTexture.......
	0x00, 0x00, 0x00, 0x17, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, // ....s_lightingNo
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, // rmalTexture.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // ......s_lighting
	0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // PbrTexture......
	0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x45, // .....s_lightingE
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, // missiveTexture..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, // .........s_light
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, // ingDepthTexture.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, // ..........s_iblB
	0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // rdfLut..........
	0x12, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, // .s_iblIrradiance
	0x4d, 0x61, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, // Map...........s_
	0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, // iblEnvironmentMa
	0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x43, 0x00, 0x00, 0x23, // p..........MC..#
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, // include <metal_s
	0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, // tdlib>.#include 
	0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, // <simd/simd.h>..u
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, // sing namespace m
	0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, // etal;..struct _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // lobal.{.    floa
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_shadow[2];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, 0x73, //     float4x4 u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x54, 0x72, 0x61, // hadowViewProjTra
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5b, 0x34, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // nsform[4];.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // loat4 u_lighting
	0x5b, 0x33, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // [3];.    float4x
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x3b, // 4 u_viewUniform;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x75, 0x5f, // .    float4x4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x55, 0x6e, 0x69, 0x66, 0x6f, // invViewProjUnifo
	0x72, 0x6d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, // rm;.    float4 u
	0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // _ibl[1];.};..str
	0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // uct xlatMtlMain_
	0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // out.{.    float4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, //  bgfx_FragData0 
	0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, // [[color(0)]];.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   float gl_FragD
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x64, 0x65, 0x70, 0x74, 0x68, 0x28, 0x61, 0x6e, 0x79, // epth [[depth(any
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn0)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // , constant _Glob
	0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, // al& _mtl_u [[buf
	0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // fer(0)]], textur
	0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, // e2d<float> s_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, // htingAlbedoTextu
	0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // re [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, // at> s_lightingNo
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, // rmalTexture [[te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, // xture(1)]], text
	0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, // ure2d<float> s_l
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // ightingPbrTextur
	0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x32, 0x29, 0x5d, 0x5d, // e [[texture(2)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x69, // t> s_lightingEmi
	0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, // ssiveTexture [[t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // exture(3)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, // ture2d<float> s_
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, // lightingDepthTex
	0x74, 0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x34, // ture [[texture(4
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, // loat> s_iblBrdfL
	0x75, 0x74, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x35, 0x29, 0x5d, // ut [[texture(5)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x63, 0x75, 0x62, 0x65, 0x3c, 0x66, // ], texturecube<f
	0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, // loat> s_iblIrrad
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, // ianceMap [[textu
	0x72, 0x65, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // re(6)]], texture
	0x63, 0x75, 0x62, 0x65, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, // cube<float> s_ib
	0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x20, // lEnvironmentMap 
	0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[texture(7)]], 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, // texture2d<float>
	0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x20, 0x5b, 0x5b, //  s_shadowMap0 [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, // texture(10)]], t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, // exture2d<float> 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x20, 0x5b, 0x5b, 0x74, // s_shadowMap1 [[t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, // exture(11)]], te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, // xture2d<float> s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x20, 0x5b, 0x5b, 0x74, 0x65, // _shadowMap2 [[te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // xture(12)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, // ture2d<float> s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, // shadowMap3 [[tex
	0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, // ture(13)]], samp
	0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, // ler s_lightingAl
	0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, // bedoTextureSampl
	0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, // er [[sampler(0)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, // ], sampler s_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, // htingNormalTextu
	0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, // reSampler [[samp
	0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ler(1)]], sample
	0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, // r s_lightingPbrT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // extureSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // sampler(2)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // mpler s_lighting
	0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // EmissiveTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ampler [[sampler
	0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, // (3)]], sampler s
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, // _lightingDepthTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, // xtureSampler [[s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x34, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, // ampler(4)]], sam
	0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, // pler s_iblBrdfLu
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, // tSampler [[sampl
	0x65, 0x72, 0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // er(5)]], sampler
	0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, //  s_iblIrradiance
	0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // MapSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(6)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, // er s_iblEnvironm
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // entMapSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // sampler(7)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // mpler s_shadowMa
	0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, // p0Sampler [[samp
	0x6c, 0x65, 0x72, 0x28, 0x31, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ler(10)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, // er s_shadowMap1S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ampler [[sampler
	0x28, 0x31, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // (11)]], sampler 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap2Samp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x32, // ler [[sampler(12
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x73, // )]], sampler s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap3Sampler
	0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x33, 0x29, 0x5d, 0x5d, //  [[sampler(13)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x35, // ;.    float4 _15
	0x32, 0x33, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, // 23 = s_lightingA
	0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, // lbedoTexture.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, // ple(s_lightingAl
	0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, // bedoTextureSampl
	0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // er, in.v_texcoor
	0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, 0x35, // d0);.    if (_15
	0x32, 0x33, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // 23.w == 0.0).   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x69, 0x73, 0x63, 0x61, //  {.        disca
	0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x29, 0x3b, 0x0a, 0x20, // rd_fragment();. 
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, //    }.    float4 
	0x5f, 0x31, 0x35, 0x33, 0x32, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // _1532 = s_lighti
	0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, // ngDepthTexture.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, // ample(s_lighting
	0x44, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, // DepthTextureSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ler, in.v_texcoo
	0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // rd0);.    float 
	0x5f, 0x31, 0x33, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x35, 0x33, 0x32, 0x2e, 0x78, 0x3b, // _1390 = _1532.x;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x34, 0x30, // .    float4 _140
	0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x69, 0x6e, 0x76, // 0 = _mtl_u.u_inv
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ViewProjUniform 
	0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x69, 0x6e, 0x2e, // * float4(fma(in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x32, // v_texcoord0.x, 2
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x69, // .0, -1.0), fma(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x2c, // n.v_texcoord0.y,
	0x20, 0x2d, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x33, //  -2.0, 1.0), _13
	0x39, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 90, 1.0);.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x34, // oat3 _1406 = _14
	0x30, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 00.xyz / float3(
	0x5f, 0x31, 0x34, 0x30, 0x30, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // _1400.w);.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // oat3 _1412 = fas
	0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x6d, 0x74, // t::normalize(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x30, // l_u.u_lighting[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x29, 0x3b, 0x0a, // ].xyz - _1406);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x35, 0x35, 0x35, //     float3 _1555
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x35, 0x32, 0x33, 0x2e, 0x78, 0x79, //  = powr(_1523.xy
	0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x32, 0x30, 0x30, 0x30, // z, float3(2.2000
	0x30, 0x30, 0x30, 0x34, 0x37, 0x36, 0x38, 0x33, 0x37, 0x31, 0x35, 0x38, 0x32, 0x30, 0x33, 0x31, // 0004768371582031
	0x32, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // 25));.    float4
	0x20, 0x5f, 0x31, 0x35, 0x37, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, //  _1570 = s_light
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ingNormalTexture
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // .sample(s_lighti
	0x6e, 0x67, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // ngNormalTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // ampler, in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // coord0);.    flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x31, 0x35, // at3 _1423 = (_15
	0x37, 0x30, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, // 70.xyz * 2.0) - 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float3(1.0);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x35, 0x37, 0x39, 0x20, 0x3d, 0x20, //  float4 _1579 = 
	0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, // s_lightingPbrTex
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, // ture.sample(s_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ghtingPbrTexture
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // Sampler, in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // xcoord0);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x34, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x35, 0x37, // oat _1429 = _157
	0x39, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 9.x;.    float _
	0x31, 0x34, 0x33, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x35, 0x37, 0x39, 0x2e, 0x79, 0x3b, 0x0a, // 1432 = _1579.y;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x34, 0x33, 0x35, 0x20, //     float _1435 
	0x3d, 0x20, 0x5f, 0x31, 0x35, 0x37, 0x39, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // = _1579.z;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, // loat3 _5594;.   
	0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, //  if (_mtl_u.u_li
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x30, 0x5d, 0x2e, 0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, // ghting[0].w != 0
	0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0).    {.      
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x34, 0x34, 0x35, 0x20, 0x3d, //   float3 _1445 =
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, //  fast::normalize
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, // (_mtl_u.u_lighti
	0x6e, 0x67, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ng[1].xyz);.    
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x34, 0x36, 0x31, //     float4 _1461
	0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, //  = _mtl_u.u_view
	0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // Uniform * float4
	0x28, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // (_1406, 1.0);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x35, 0x39, //       float _559
	0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, // 2;.        do.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, //     if (_mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x20, 0x21, 0x3d, 0x20, // _shadow[0].x != 
	0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0).           
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x20, 0x3d, //    float _1623 =
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x30, //  fast::max(0.050
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x34, 0x35, 0x30, 0x35, 0x38, 0x30, 0x35, 0x39, 0x36, // 0000007450580596
	0x39, 0x32, 0x33, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // 923828125 * (1.0
	0x20, 0x2d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, //  - dot(_1423, _1
	0x34, 0x34, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x39, 0x39, 0x39, 0x39, // 445)), 0.0049999
	0x39, 0x39, 0x38, 0x38, 0x38, 0x32, 0x34, 0x31, 0x32, 0x39, 0x31, 0x30, 0x34, 0x36, 0x31, 0x34, // 9988824129104614
	0x32, 0x35, 0x37, 0x38, 0x31, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 2578125);.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x2d, //           if ((-
	0x5f, 0x31, 0x34, 0x36, 0x31, 0x2e, 0x7a, 0x29, 0x20, 0x3c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // _1461.z) < _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x29, // u.u_shadow[1].x)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, //        float4 _1
	0x36, 0x33, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, // 638 = _mtl_u.u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x54, 0x72, 0x61, // hadowViewProjTra
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5b, 0x30, 0x5d, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, // nsform[0] * floa
	0x74, 0x34, 0x28, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // t4(_1406, 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x36, 0x34, 0x33, //     float4 _1643
	0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  = _1638 / float
	0x34, 0x28, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 4(_1638.w);.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x66, // float2 _1779 = f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x31, 0x36, 0x34, 0x33, 0x2e, 0x78, 0x20, 0x2b, // loat2((_1643.x +
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, //  1.0) * 0.5, fma
	0x28, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x36, 0x34, 0x33, 0x2e, // ((-1.0) - _1643.
	0x79, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, // y, 0.5, 1.0));. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x20, 0x3d, //    float _1651 =
	0x20, 0x32, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, //  2.0 / _mtl_u.u_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, // shadow[1].x;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x20, 0x3d, 0x20, 0x5f, //  float _1655 = _
	0x31, 0x36, 0x34, 0x33, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1643.z;.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //             floa
	0x74, 0x20, 0x5f, 0x31, 0x39, 0x34, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, // t _1949 = ((((((
	0x28, 0x28, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, // ((step(_1655, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, // a(_1623, _1651, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap0.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, // ple(s_shadowMap0
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, // Sampler, (_1779 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, // + (float2(-1.5) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // * _mtl_u.u_shado
	0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, 0x20, // w[0].y))).x)) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1655, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1651, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap0.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, // e(s_shadowMap0Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, // mpler, (_1779 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, // (float2(-1.5, -0
	0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, // .5) * _mtl_u.u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, // hadow[0].y))).x)
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, // )) + step(_1655,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, //  fma(_1623, _165
	0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, // 1, s_shadowMap0.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // sample(s_shadowM
	0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, // ap0Sampler, (_17
	0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, // 79 + (float2(-1.
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 5, 0.5) * _mtl_u
	0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, // .u_shadow[0].y))
	0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, // ).x))) + step(_1
	0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, // 655, fma(_1623, 
	0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // _1651, s_shadowM
	0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, // ap0.sample(s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // dowMap0Sampler, 
	0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // (_1779 + (float2
	0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // (-1.5, 1.5) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, // tl_u.u_shadow[0]
	0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, // .y))).x))) + ste
	0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, // p(_1655, fma(_16
	0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, // 23, _1651, s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, // dowMap0.sample(s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap0Sampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // er, (_1779 + (fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, // oat2(-0.5, -1.5)
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, //  * _mtl_u.u_shad
	0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, // ow[0].y))).x))) 
	0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, // + step(_1655, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, // a(_1623, _1651, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap0.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, // ple(s_shadowMap0
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, // Sampler, (_1779 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, // + (float2(-0.5) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // * _mtl_u.u_shado
	0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, // w[0].y))).x))) +
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, //  step(_1655, fma
	0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, // (_1623, _1651, s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, // _shadowMap0.samp
	0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, // le(s_shadowMap0S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, // ampler, (_1779 +
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, //  (float2(-0.5, 0
	0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, // .5) * _mtl_u.u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, // hadow[0].y))).x)
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, // )) + step(_1655,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, //  fma(_1623, _165
	0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, // 1, s_shadowMap0.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // sample(s_shadowM
	0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, // ap0Sampler, (_17
	0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, // 79 + (float2(-0.
	0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 5, 1.5) * _mtl_u
	0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, // .u_shadow[0].y))
	0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, // ).x))) + step(_1
	0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, // 655, fma(_1623, 
	0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // _1651, s_shadowM
	0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, // ap0.sample(s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // dowMap0Sampler, 
	0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // (_1779 + (float2
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // (0.5, -1.5) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, // tl_u.u_shadow[0]
	0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, // .y))).x))) + ste
	0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, // p(_1655, fma(_16
	0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, // 23, _1651, s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, // dowMap0.sample(s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap0Sampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // er, (_1779 + (fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, // oat2(0.5, -0.5) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // * _mtl_u.u_shado
	0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x20, // w[0].y))).x));. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, //    _5592 = (((((
	0x28, 0x5f, 0x31, 0x39, 0x34, 0x39, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, // (_1949 + step(_1
	0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, // 655, fma(_1623, 
	0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // _1651, s_shadowM
	0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, // ap0.sample(s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // dowMap0Sampler, 
	0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // (_1779 + (float2
	0x28, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, // (0.5) * _mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, // _shadow[0].y))).
	0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, // x))) + step(_165
	0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 5, fma(_1623, _1
	0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 651, s_shadowMap
	0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 0.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap0Sampler, (_
	0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // 1779 + (float2(0
	0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // .5, 1.5) * _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, // u.u_shadow[0].y)
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, // )).x))) + step(_
	0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, // 1655, fma(_1623,
	0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _1651, s_shadow
	0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, // Map0.sample(s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adowMap0Sampler,
	0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  (_1779 + (float
	0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, // 2(1.5, -1.5) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, // mtl_u.u_shadow[0
	0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // ].y))).x))) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1655, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1651, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap0.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap0Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_1779 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, // loat2(1.5, -0.5)
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, //  * _mtl_u.u_shad
	0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, // ow[0].y))).x))) 
	0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6d, // + step(_1655, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, 0x31, 0x2c, 0x20, // a(_1623, _1651, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap0.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, // ple(s_shadowMap0
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x37, 0x39, 0x20, // Sampler, (_1779 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, // + (float2(1.5, 0
	0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, // .5) * _mtl_u.u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, // hadow[0].y))).x)
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x35, 0x35, 0x2c, // )) + step(_1655,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x35, //  fma(_1623, _165
	0x31, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x30, 0x2e, // 1, s_shadowMap0.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // sample(s_shadowM
	0x61, 0x70, 0x30, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x31, 0x37, // ap0Sampler, (_17
	0x37, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, // 79 + (float2(1.5
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // ) * _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, // dow[0].y))).x)))
	0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  * 0.0625;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, //                b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // reak;.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //              {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x36, 0x31, 0x2e, 0x7a, //    if ((-_1461.z
	0x29, 0x20, 0x3c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // ) < _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dow[1].y).      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //               {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, //         float4 _
	0x31, 0x36, 0x37, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // 1672 = _mtl_u.u_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x54, 0x72, // shadowViewProjTr
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5b, 0x31, 0x5d, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, // ansform[1] * flo
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // at4(_1406, 1.0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, //          float4 
	0x5f, 0x31, 0x36, 0x37, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x36, 0x37, 0x32, 0x20, 0x2f, 0x20, // _1677 = _1672 / 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, 0x36, 0x37, 0x32, 0x2e, 0x77, 0x29, 0x3b, // float4(_1672.w);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, //          float2 
	0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x28, // _2359 = float2((
	0x5f, 0x31, 0x36, 0x37, 0x37, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, // _1677.x + 1.0) *
	0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x29, //  0.5, fma((-1.0)
	0x20, 0x2d, 0x20, 0x5f, 0x31, 0x36, 0x37, 0x37, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, //  - _1677.y, 0.5,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  1.0));.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x32, 0x2e, // float _1685 = 2.
	0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // 0 / _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dow[1].y;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x20, 0x3d, 0x20, //   float _1689 = 
	0x5f, 0x31, 0x36, 0x37, 0x37, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _1677.z;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x32, 0x35, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x28, //  float _2529 = (
	0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, // (((((((step(_168
	0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 9, fma(_1623, _1
	0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 685, s_shadowMap
	0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 1.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap1Sampler, (_
	0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, // 2359 + (float2(-
	0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // 1.5) * _mtl_u.u_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, // shadow[0].y))).x
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, // )) + step(_1689,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, //  fma(_1623, _168
	0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, // 5, s_shadowMap1.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // sample(s_shadowM
	0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, // ap1Sampler, (_23
	0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, // 59 + (float2(-1.
	0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // 5, -0.5) * _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, // u.u_shadow[0].y)
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, // )).x))) + step(_
	0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, // 1689, fma(_1623,
	0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _1685, s_shadow
	0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, // Map1.sample(s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adowMap1Sampler,
	0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  (_2359 + (float
	0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, // 2(-1.5, 0.5) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, // mtl_u.u_shadow[0
	0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // ].y))).x))) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1689, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1685, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap1.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap1Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_2359 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, // loat2(-1.5, 1.5)
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, //  * _mtl_u.u_shad
	0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, // ow[0].y))).x))) 
	0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, // + step(_1689, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, // a(_1623, _1685, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap1.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, // ple(s_shadowMap1
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, // Sampler, (_2359 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, // + (float2(-0.5, 
	0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, // -1.5) * _mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, // _shadow[0].y))).
	0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, // x))) + step(_168
	0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 9, fma(_1623, _1
	0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 685, s_shadowMap
	0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 1.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap1Sampler, (_
	0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, // 2359 + (float2(-
	0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // 0.5) * _mtl_u.u_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, // shadow[0].y))).x
	0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, // ))) + step(_1689
	0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, // , fma(_1623, _16
	0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, // 85, s_shadowMap1
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, // .sample(s_shadow
	0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, // Map1Sampler, (_2
	0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, // 359 + (float2(-0
	0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // .5, 0.5) * _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, // u.u_shadow[0].y)
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, // )).x))) + step(_
	0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, // 1689, fma(_1623,
	0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _1685, s_shadow
	0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, // Map1.sample(s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adowMap1Sampler,
	0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  (_2359 + (float
	0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, // 2(-0.5, 1.5) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, // mtl_u.u_shadow[0
	0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // ].y))).x))) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1689, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1685, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap1.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap1Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_2359 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, // loat2(0.5, -1.5)
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, //  * _mtl_u.u_shad
	0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, // ow[0].y))).x))) 
	0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, // + step(_1689, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, // a(_1623, _1685, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap1.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, // ple(s_shadowMap1
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, // Sampler, (_2359 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, // + (float2(0.5, -
	0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // 0.5) * _mtl_u.u_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, // shadow[0].y))).x
	0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ));.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, //             _559
	0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x5f, 0x32, 0x35, 0x32, 0x39, 0x20, // 2 = ((((((_2529 
	0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, // + step(_1689, fm
	0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, // a(_1623, _1685, 
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, // s_shadowMap1.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, // ple(s_shadowMap1
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, // Sampler, (_2359 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, // + (float2(0.5) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, // [0].y))).x))) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1689, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1685, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap1.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, // e(s_shadowMap1Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, // mpler, (_2359 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, // (float2(0.5, 1.5
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // ) * _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, // dow[0].y))).x)))
	0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, //  + step(_1689, f
	0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, // ma(_1623, _1685,
	0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, //  s_shadowMap1.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // mple(s_shadowMap
	0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, // 1Sampler, (_2359
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, //  + (float2(1.5, 
	0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, // -1.5) * _mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, // _shadow[0].y))).
	0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, // x))) + step(_168
	0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 9, fma(_1623, _1
	0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 685, s_shadowMap
	0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 1.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap1Sampler, (_
	0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, // 2359 + (float2(1
	0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // .5, -0.5) * _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, // _u.u_shadow[0].y
	0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, // ))).x))) + step(
	0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, // _1689, fma(_1623
	0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // , _1685, s_shado
	0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, // wMap1.sample(s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap1Sampler
	0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // , (_2359 + (floa
	0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, // t2(1.5, 0.5) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, // mtl_u.u_shadow[0
	0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // ].y))).x))) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x36, 0x38, 0x39, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1689, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x36, 0x38, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1685, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap1.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x31, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap1Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x33, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_2359 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // loat2(1.5) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, // l_u.u_shadow[0].
	0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x36, // y))).x))) * 0.06
	0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25;.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // k;.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, //              els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x69, 0x66, 0x20, 0x28, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x36, 0x31, 0x2e, 0x7a, 0x29, 0x20, 0x3c, // if ((-_1461.z) <
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // [1].z).         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //                {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //              flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x37, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // at4 _1706 = _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, // _u.u_shadowViewP
	0x72, 0x6f, 0x6a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5b, 0x32, 0x5d, 0x20, // rojTransform[2] 
	0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x2c, 0x20, // * float4(_1406, 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1.0);.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x31, 0x20, 0x3d, //   float4 _1711 =
	0x20, 0x5f, 0x31, 0x37, 0x30, 0x36, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, //  _1706 / float4(
	0x5f, 0x31, 0x37, 0x30, 0x36, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _1706.w);.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x32, 0x39, //       float2 _29
	0x33, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x31, 0x37, // 39 = float2((_17
	0x31, 0x31, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, // 11.x + 1.0) * 0.
	0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, // 5, fma((-1.0) - 
	0x5f, 0x31, 0x37, 0x31, 0x31, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, // _1711.y, 0.5, 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0));.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x32, //  float _1719 = 2
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, // .0 / _mtl_u.u_sh
	0x61, 0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // adow[1].z;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x37, //        float _17
	0x32, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x31, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // 23 = _1711.z;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //           float 
	0x5f, 0x33, 0x31, 0x30, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, // _3109 = ((((((((
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1723, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1719, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap2.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, // e(s_shadowMap2Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, // mpler, (_2939 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, // (float2(-1.5) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, // _mtl_u.u_shadow[
	0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // 0].y))).x)) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1723, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1719, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap2.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap2Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_2939 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, // loat2(-1.5, -0.5
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // ) * _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, // dow[0].y))).x)))
	0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, //  + step(_1723, f
	0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, // ma(_1623, _1719,
	0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, //  s_shadowMap2.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // mple(s_shadowMap
	0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, // 2Sampler, (_2939
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, //  + (float2(-1.5,
	0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, //  0.5) * _mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, // _shadow[0].y))).
	0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, // x))) + step(_172
	0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 3, fma(_1623, _1
	0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 719, s_shadowMap
	0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 2.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap2Sampler, (_
	0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, // 2939 + (float2(-
	0x31, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 1.5, 1.5) * _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, // _u.u_shadow[0].y
	0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, // ))).x))) + step(
	0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, // _1723, fma(_1623
	0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // , _1719, s_shado
	0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, // wMap2.sample(s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap2Sampler
	0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // , (_2939 + (floa
	0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, // t2(-0.5, -1.5) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, // [0].y))).x))) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1723, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1719, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap2.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, // e(s_shadowMap2Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, // mpler, (_2939 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, // (float2(-0.5) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, // _mtl_u.u_shadow[
	0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, // 0].y))).x))) + s
	0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, // tep(_1723, fma(_
	0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, // 1623, _1719, s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // hadowMap2.sample
	0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, // (s_shadowMap2Sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, // pler, (_2939 + (
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, // float2(-0.5, 0.5
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, // ) * _mtl_u.u_sha
	0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, // dow[0].y))).x)))
	0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, //  + step(_1723, f
	0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, // ma(_1623, _1719,
	0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, //  s_shadowMap2.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // mple(s_shadowMap
	0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, // 2Sampler, (_2939
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, //  + (float2(-0.5,
	0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, //  1.5) * _mtl_u.u
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, // _shadow[0].y))).
	0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, // x))) + step(_172
	0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, // 3, fma(_1623, _1
	0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, // 719, s_shadowMap
	0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // 2.sample(s_shado
	0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // wMap2Sampler, (_
	0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // 2939 + (float2(0
	0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // .5, -1.5) * _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, // _u.u_shadow[0].y
	0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, // ))).x))) + step(
	0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, // _1723, fma(_1623
	0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // , _1719, s_shado
	0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, // wMap2.sample(s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap2Sampler
	0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // , (_2939 + (floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, // t2(0.5, -0.5) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, // _mtl_u.u_shadow[
	0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 0].y))).x));.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x20, 0x3d, //          _5592 =
	0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x5f, 0x33, 0x31, 0x30, 0x39, 0x20, 0x2b, 0x20, 0x73, //  ((((((_3109 + s
	0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, // tep(_1723, fma(_
	0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, // 1623, _1719, s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // hadowMap2.sample
	0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, // (s_shadowMap2Sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, // pler, (_2939 + (
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // float2(0.5) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, // tl_u.u_shadow[0]
	0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, // .y))).x))) + ste
	0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, // p(_1723, fma(_16
	0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, // 23, _1719, s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, // dowMap2.sample(s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap2Sampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // er, (_2939 + (fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, // oat2(0.5, 1.5) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, // [0].y))).x))) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1723, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1719, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap2.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, // e(s_shadowMap2Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, // mpler, (_2939 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, // (float2(1.5, -1.
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, // 5) * _mtl_u.u_sh
	0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, // adow[0].y))).x))
	0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, // ) + step(_1723, 
	0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, // fma(_1623, _1719
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, // , s_shadowMap2.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // ample(s_shadowMa
	0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, // p2Sampler, (_293
	0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, // 9 + (float2(1.5,
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //  -0.5) * _mtl_u.
	0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, // u_shadow[0].y)))
	0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, // .x))) + step(_17
	0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, // 23, fma(_1623, _
	0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // 1719, s_shadowMa
	0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, // p2.sample(s_shad
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // owMap2Sampler, (
	0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // _2939 + (float2(
	0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 1.5, 0.5) * _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, // _u.u_shadow[0].y
	0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, // ))).x))) + step(
	0x5f, 0x31, 0x37, 0x32, 0x33, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, // _1723, fma(_1623
	0x2c, 0x20, 0x5f, 0x31, 0x37, 0x31, 0x39, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // , _1719, s_shado
	0x77, 0x4d, 0x61, 0x70, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, // wMap2.sample(s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap2Sampler
	0x2c, 0x20, 0x28, 0x5f, 0x32, 0x39, 0x33, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // , (_2939 + (floa
	0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // t2(1.5) * _mtl_u
	0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, // .u_shadow[0].y))
	0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x32, 0x35, 0x3b, // ).x))) * 0.0625;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //              bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ak;.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x36, 0x31, 0x2e, 0x7a, 0x29, 0x20, //  if ((-_1461.z) 
	0x3c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // < _mtl_u.u_shado
	0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x77, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // w[1].w).        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x37, //       float4 _17
	0x34, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, // 40 = _mtl_u.u_sh
	0x61, 0x64, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x54, 0x72, 0x61, 0x6e, // adowViewProjTran
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5b, 0x33, 0x5d, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sform[3] * float
	0x34, 0x28, 0x5f, 0x31, 0x34, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // 4(_1406, 1.0);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, //                f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x37, 0x34, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x31, // loat4 _1745 = _1
	0x37, 0x34, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, 0x37, // 740 / float4(_17
	0x34, 0x30, 0x2e, 0x77, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40.w);.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, //        float2 _3
	0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x31, // 519 = float2((_1
	0x37, 0x34, 0x35, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x30, // 745.x + 1.0) * 0
	0x2e, 0x35, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, // .5, fma((-1.0) -
	0x20, 0x5f, 0x31, 0x37, 0x34, 0x35, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, //  _1745.y, 0.5, 1
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0));.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x37, 0x35, //       float _175
	0x33, 0x20, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 3 = 2.0 / _mtl_u
	0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x31, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, // .u_shadow[1].w;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x31, // float _1757 = _1
	0x37, 0x34, 0x35, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 745.z;.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x36, //        float _36
	0x38, 0x39, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x73, 0x74, 0x65, // 89 = ((((((((ste
	0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, // p(_1757, fma(_16
	0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, // 23, _1753, s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, // dowMap3.sample(s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap3Sampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // er, (_3519 + (fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // oat2(-1.5) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, // l_u.u_shadow[0].
	0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, // y))).x)) + step(
	0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, // _1757, fma(_1623
	0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // , _1753, s_shado
	0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, // wMap3.sample(s_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadowMap3Sampler
	0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // , (_3519 + (floa
	0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, // t2(-1.5, -0.5) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, // [0].y))).x))) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1757, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1753, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap3.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, // e(s_shadowMap3Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, // mpler, (_3519 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, // (float2(-1.5, 0.
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, // 5) * _mtl_u.u_sh
	0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, // adow[0].y))).x))
	0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, // ) + step(_1757, 
	0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, // fma(_1623, _1753
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, // , s_shadowMap3.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // ample(s_shadowMa
	0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, // p3Sampler, (_351
	0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x31, 0x2e, 0x35, // 9 + (float2(-1.5
	0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 1.5) * _mtl_u.
	0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, // u_shadow[0].y)))
	0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, // .x))) + step(_17
	0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, // 57, fma(_1623, _
	0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // 1753, s_shadowMa
	0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, // p3.sample(s_shad
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // owMap3Sampler, (
	0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // _3519 + (float2(
	0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // -0.5, -1.5) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, // tl_u.u_shadow[0]
	0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, // .y))).x))) + ste
	0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, // p(_1757, fma(_16
	0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, // 23, _1753, s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, // dowMap3.sample(s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, // _shadowMap3Sampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // er, (_3519 + (fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // oat2(-0.5) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, // l_u.u_shadow[0].
	0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, // y))).x))) + step
	0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, // (_1757, fma(_162
	0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, // 3, _1753, s_shad
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, // owMap3.sample(s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadowMap3Sample
	0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, // r, (_3519 + (flo
	0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, // at2(-0.5, 0.5) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, //  _mtl_u.u_shadow
	0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, // [0].y))).x))) + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1757, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1753, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap3.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, // e(s_shadowMap3Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, // mpler, (_3519 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x2d, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, // (float2(-0.5, 1.
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, // 5) * _mtl_u.u_sh
	0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, // adow[0].y))).x))
	0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, // ) + step(_1757, 
	0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, // fma(_1623, _1753
	0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, // , s_shadowMap3.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // ample(s_shadowMa
	0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, // p3Sampler, (_351
	0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, // 9 + (float2(0.5,
	0x20, 0x2d, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //  -1.5) * _mtl_u.
	0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, // u_shadow[0].y)))
	0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, // .x))) + step(_17
	0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, // 57, fma(_1623, _
	0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, // 1753, s_shadowMa
	0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, // p3.sample(s_shad
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // owMap3Sampler, (
	0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // _3519 + (float2(
	0x30, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 0.5, -0.5) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, // l_u.u_shadow[0].
	0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // y))).x));.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x20, //           _5592 
	0x3d, 0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x5f, 0x33, 0x36, 0x38, 0x39, 0x20, 0x2b, 0x20, // = ((((((_3689 + 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // step(_1757, fma(
	0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, // _1623, _1753, s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // shadowMap3.sampl
	0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, // e(s_shadowMap3Sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, // mpler, (_3519 + 
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, // (float2(0.5) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, // mtl_u.u_shadow[0
	0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, // ].y))).x))) + st
	0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, // ep(_1757, fma(_1
	0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, // 623, _1753, s_sh
	0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // adowMap3.sample(
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, // s_shadowMap3Samp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, // ler, (_3519 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x35, 0x29, 0x20, // loat2(0.5, 1.5) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, // * _mtl_u.u_shado
	0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, // w[0].y))).x))) +
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, //  step(_1757, fma
	0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, // (_1623, _1753, s
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, // _shadowMap3.samp
	0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, // le(s_shadowMap3S
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, // ampler, (_3519 +
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x2d, 0x31, //  (float2(1.5, -1
	0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, // .5) * _mtl_u.u_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, // hadow[0].y))).x)
	0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, // )) + step(_1757,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, //  fma(_1623, _175
	0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, // 3, s_shadowMap3.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // sample(s_shadowM
	0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, // ap3Sampler, (_35
	0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, // 19 + (float2(1.5
	0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // , -0.5) * _mtl_u
	0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x29, // .u_shadow[0].y))
	0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x31, // ).x))) + step(_1
	0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, 0x33, 0x2c, 0x20, // 757, fma(_1623, 
	0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, // _1753, s_shadowM
	0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x73, 0x68, 0x61, // ap3.sample(s_sha
	0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // dowMap3Sampler, 
	0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // (_3519 + (float2
	0x28, 0x31, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // (1.5, 0.5) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, // l_u.u_shadow[0].
	0x79, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2b, 0x20, 0x73, 0x74, 0x65, 0x70, // y))).x))) + step
	0x28, 0x5f, 0x31, 0x37, 0x35, 0x37, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x36, 0x32, // (_1757, fma(_162
	0x33, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x2c, 0x20, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x64, // 3, _1753, s_shad
	0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, // owMap3.sample(s_
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x33, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadowMap3Sample
	0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x39, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, // r, (_3519 + (flo
	0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // at2(1.5) * _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, // u.u_shadow[0].y)
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x32, 0x35, // )).x))) * 0.0625
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      }.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x31, 0x2e, //       _5592 = 1.
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0;.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, //     break; // un
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, // reachable workar
	0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ound.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, //              }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, //        break; //
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, //  unreachable wor
	0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // karound.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, //   break; // unre
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, // achable workarou
	0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // nd.             
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    }.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, //      break; // u
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, // nreachable worka
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // round.          
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // else.           
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, //    _5592 = 1.0;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // break;.         
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    }.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, //  break; // unrea
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, // chable workaroun
	0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, // d.        } whil
	0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e(false);.      
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x32, 0x32, 0x30, 0x20, 0x3d, //   float3 _4220 =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x33, //  mix(float3(0.03
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x30, 0x35, 0x39, 0x33, 0x30, 0x33, 0x32, 0x38, // 9999999105930328
	0x33, 0x36, 0x39, 0x31, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x35, 0x35, // 369140625), _155
	0x35, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x39, 0x29, // 5, float3(_1429)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // );.        float
	0x33, 0x20, 0x5f, 0x34, 0x31, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // 3 _4125 = fast::
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x20, // normalize(_1412 
	0x2b, 0x20, 0x5f, 0x31, 0x34, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // + _1445);.      
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x32, 0x33, 0x32, 0x20, 0x3d, //   float3 _4232 =
	0x20, 0x5f, 0x34, 0x32, 0x32, 0x30, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  _4220 + ((float
	0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x34, 0x32, 0x32, 0x30, 0x29, 0x20, // 3(1.0) - _4220) 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, // * powr(fast::cla
	0x6d, 0x70, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // mp(1.0 - fast::m
	0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x5f, 0x31, // ax(dot(_4125, _1
	0x34, 0x31, 0x32, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, // 412), 0.0), 0.0,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x35, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  1.0), 5.0));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x32, 0x34, //       float _424
	0x32, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x34, 0x33, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x34, 0x33, // 2 = _1432 * _143
	0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 2;.        float
	0x20, 0x5f, 0x34, 0x32, 0x34, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, //  _4249 = fast::m
	0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x34, // ax(dot(_1423, _4
	0x31, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125), 0.0);.    
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x32, 0x35, 0x38, 0x20, //     float _4258 
	0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x28, // = fast::max(fma(
	0x5f, 0x34, 0x32, 0x34, 0x39, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x32, 0x34, 0x39, 0x2c, 0x20, 0x66, // _4249 * _4249, f
	0x6d, 0x61, 0x28, 0x5f, 0x34, 0x32, 0x34, 0x32, 0x2c, 0x20, 0x5f, 0x34, 0x32, 0x34, 0x32, 0x2c, // ma(_4242, _4242,
	0x20, 0x2d, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x39, 0x2e, //  -1.0), 1.0), 9.
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, // 9999997473787516
	0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, // 355514526367188e
	0x2d, 0x30, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // -05);.        fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x32, 0x37, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, // oat _4278 = fast
	0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, // ::max(dot(_1423,
	0x20, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, //  _1412), 0.0);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x32, //        float _42
	0x38, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, // 82 = fast::max(d
	0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x34, 0x35, 0x29, // ot(_1423, _1445)
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , 0.0);.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x32, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x31, // float _4297 = _1
	0x34, 0x33, 0x32, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 432 + 1.0;.     
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x33, 0x30, 0x30, 0x20, 0x3d, //    float _4300 =
	0x20, 0x5f, 0x34, 0x32, 0x39, 0x37, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x32, 0x39, 0x37, 0x3b, 0x0a, //  _4297 * _4297;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, //         float _4
	0x33, 0x31, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x34, 0x33, 0x32, 0x20, 0x2b, 0x20, 0x31, 0x2e, // 315 = _1432 + 1.
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0;.        float
	0x20, 0x5f, 0x34, 0x33, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x33, 0x31, 0x35, 0x20, 0x2a, //  _4318 = _4315 *
	0x20, 0x5f, 0x34, 0x33, 0x31, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _4315;.        
	0x5f, 0x35, 0x35, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x28, // _5594 = (((fma((
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, // (float3(1.0) - _
	0x34, 0x32, 0x33, 0x32, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, // 4232) * (1.0 - _
	0x31, 0x34, 0x32, 0x39, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x2c, 0x20, // 1429)) * _1555, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x33, 0x31, 0x38, 0x33, 0x30, 0x39, 0x38, // float3(0.3183098
	0x37, 0x33, 0x33, 0x34, 0x32, 0x35, 0x31, 0x34, 0x30, 0x33, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, // 7334251403808593
	0x37, 0x35, 0x29, 0x2c, 0x20, 0x28, 0x5f, 0x34, 0x32, 0x33, 0x32, 0x20, 0x2a, 0x20, 0x28, 0x28, // 75), (_4232 * ((
	0x28, 0x5f, 0x34, 0x32, 0x34, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x32, 0x34, 0x32, 0x29, 0x20, // (_4242 * _4242) 
	0x2f, 0x20, 0x28, 0x28, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x37, 0x34, 0x31, 0x30, // / ((3.1415927410
	0x31, 0x32, 0x35, 0x37, 0x33, 0x32, 0x34, 0x32, 0x31, 0x38, 0x37, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 125732421875 * _
	0x34, 0x32, 0x35, 0x38, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x32, 0x35, 0x38, 0x29, 0x29, 0x20, // 4258) * _4258)) 
	0x2a, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x32, 0x38, 0x32, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, // * ((_4282 / fma(
	0x5f, 0x34, 0x32, 0x38, 0x32, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x34, 0x33, 0x31, // _4282, fma(-_431
	0x38, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, // 8, 0.125, 1.0), 
	0x5f, 0x34, 0x33, 0x31, 0x38, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x20, // _4318 * 0.125)) 
	0x2a, 0x20, 0x28, 0x5f, 0x34, 0x32, 0x37, 0x38, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, // * (_4278 / fma(_
	0x34, 0x32, 0x37, 0x38, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x34, 0x33, 0x30, 0x30, // 4278, fma(-_4300
	0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, // , 0.125, 1.0), _
	0x34, 0x33, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x29, 0x29, // 4300 * 0.125))))
	0x29, 0x20, 0x2f, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x34, // ) / float3(fma(4
	0x2e, 0x30, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, // .0 * fast::max(d
	0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x29, // ot(_1423, _1412)
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, // , 0.0), fast::ma
	0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x34, // x(dot(_1423, _14
	0x34, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, // 45), 0.0), 9.999
	0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, // 9997473787516355
	0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, // 514526367188e-05
	0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, // ))) * _mtl_u.u_l
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, // ighting[2].xyz) 
	0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, // * fast::max(dot(
	0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x34, 0x35, 0x29, 0x2c, 0x20, 0x30, // _1423, _1445), 0
	0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x32, 0x29, 0x20, 0x2b, 0x20, // .0)) * _5592) + 
	0x28, 0x28, 0x5f, 0x31, 0x35, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ((_1555 * _mtl_u
	0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x32, 0x5d, 0x2e, 0x77, // .u_lighting[2].w
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x34, 0x33, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ) * _1435);.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x34, 0x20, 0x3d, // .        _5594 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  float3(0.0);.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, //   }.    float3 _
	0x35, 0x35, 0x39, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, // 5595;.    if (_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x20, // tl_u.u_ibl[0].x 
	0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // != 0.0).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x34, //       float3 _44
	0x34, 0x36, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 46 = mix(float3(
	0x30, 0x2e, 0x30, 0x33, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x30, 0x35, 0x39, 0x33, // 0.03999999910593
	0x30, 0x33, 0x32, 0x38, 0x33, 0x36, 0x39, 0x31, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, // 0328369140625), 
	0x5f, 0x31, 0x35, 0x35, 0x35, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, // _1555, float3(_1
	0x34, 0x32, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // 429));.        f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x34, 0x36, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x34, // loat3 _4463 = _4
	0x34, 0x34, 0x36, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, // 446 + ((fast::ma
	0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, // x(float3(1.0 - _
	0x31, 0x34, 0x33, 0x32, 0x29, 0x2c, 0x20, 0x5f, 0x34, 0x34, 0x34, 0x36, 0x29, 0x20, 0x2d, 0x20, // 1432), _4446) - 
	0x5f, 0x34, 0x34, 0x34, 0x36, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x61, // _4446) * powr(fa
	0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // st::clamp(1.0 - 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, // fast::max(dot(_1
	0x34, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 423, _1412), 0.0
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x35, 0x2e, // ), 0.0, 1.0), 5.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 0));.        flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x34, 0x35, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x69, 0x62, // at4 _4503 = s_ib
	0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // lBrdfLut.sample(
	0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, // s_iblBrdfLutSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x66, 0x61, 0x73, 0x74, // ler, float2(fast
	0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x2c, // ::max(dot(_1423,
	0x20, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, //  _1412), 0.0), _
	0x31, 0x34, 0x33, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1432));.        
	0x5f, 0x35, 0x35, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x34, 0x20, 0x2b, 0x20, // _5595 = _5594 + 
	0x28, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, // (fma(((float3(1.
	0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x34, 0x34, 0x36, 0x33, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // 0) - _4463) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x34, 0x32, 0x39, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x73, // .0 - _1429)) * s
	0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, // _iblIrradianceMa
	0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, // p.sample(s_iblIr
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, // radianceMapSampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x32, 0x33, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // er, _1423).xyz, 
	0x5f, 0x31, 0x35, 0x35, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, // _1555, s_iblEnvi
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ronmentMap.sampl
	0x65, 0x28, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, // e(s_iblEnvironme
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, // ntMapSampler, re
	0x66, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x31, 0x32, 0x2c, 0x20, 0x5f, 0x31, // flect(-_1412, _1
	0x34, 0x32, 0x33, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x31, 0x34, 0x33, // 423), level(_143
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x6d, // 2 * float(int(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, // tl_u.u_ibl[0].y)
	0x29, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x34, 0x36, // ))).xyz * ((_446
	0x33, 0x20, 0x2a, 0x20, 0x5f, 0x34, 0x35, 0x30, 0x33, 0x2e, 0x78, 0x29, 0x20, 0x2b, 0x20, 0x66, // 3 * _4503.x) + f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x34, 0x35, 0x30, 0x33, 0x2e, 0x79, 0x29, 0x29, 0x29, // loat3(_4503.y)))
	0x20, 0x2a, 0x20, 0x5f, 0x31, 0x34, 0x33, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, //  * _1435);.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // .    else.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x35, 0x20, 0x3d, 0x20, //         _5595 = 
	0x5f, 0x35, 0x35, 0x39, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // _5594;.    }.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x35, 0x35, // ta0 = float4(_55
	0x39, 0x35, 0x20, 0x2b, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, // 95 + powr(s_ligh
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, // tingEmissiveText
	0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6c, 0x69, 0x67, // ure.sample(s_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, // htingEmissiveTex
	0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, // tureSampler, in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, // v_texcoord0).xyz
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x32, 0x30, 0x30, 0x30, 0x30, // , float3(2.20000
	0x30, 0x30, 0x34, 0x37, 0x36, 0x38, 0x33, 0x37, 0x31, 0x35, 0x38, 0x32, 0x30, 0x33, 0x31, 0x32, // 0047683715820312
	0x35, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // 5)), 1.0);.    o
	0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // ut.gl_FragDepth 
	0x3d, 0x20, 0x5f, 0x31, 0x33, 0x39, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, // = _1390;.    ret
	0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, 0x03, // urn out;.}....`.
};
