static const uint8_t OtForwardPbrFS_mtl[6375] =
{
	0x46, 0x53, 0x48, 0x0b, 0x19, 0x67, 0x93, 0x59, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x06, 0x75, // FSH..g.Y.......u
	0x5f, 0x63, 0x6c, 0x69, 0x70, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, // _clip...........
	0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, // s_albedoTextureS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ampler..........
	0x16, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .s_albedoTexture
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, // Texture.........
	0x00, 0x21, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x67, // .!s_metallicRoug
	0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, // hnessTextureSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x73, 0x5f, // ler..........!s_
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, // metallicRoughnes
	0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, // sTextureTexture.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, // ..........s_emis
	0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, // siveTextureSampl
	0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x73, 0x5f, 0x65, // er...........s_e
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, // missiveTextureTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, // xture...........
	0x73, 0x5f, 0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, // s_aoTextureSampl
	0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x73, 0x5f, 0x61, // er...........s_a
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, // oTextureTexture.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, // ..........s_norm
	0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // alTextureSampler
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x73, 0x5f, 0x6e, 0x6f, 0x72, // ...........s_nor
	0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // malTextureTextur
	0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x69, 0x62, // e...........s_ib
	0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, // lBrdfLutSampler.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, // ..........s_iblB
	0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, // rdfLutTexture...
	0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, // ........s_iblIrr
	0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // adianceMapSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x73, 0x5f, 0x69, 0x62, // r...........s_ib
	0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x65, // lIrradianceMapTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, // xture...........
	0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, // s_iblEnvironment
	0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, // MapSampler......
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, // .....s_iblEnviro
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, // nmentMapTexture.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, // ..........u_pbrM
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x05, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, // aterial.........
	0x00, 0x0a, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x03, 0x60, 0x00, // ..u_lighting..`.
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x12, 0x01, 0x90, 0x00, // .......u_ibl....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, // .......s_albedoT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x1a, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x67, 0x68, // .s_metallicRough
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, // nessTexture.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, // ......s_emissive
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Texture.........
	0x00, 0x0b, 0x73, 0x5f, 0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, // ..s_aoTexture...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ........s_normal
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Texture.........
	0x00, 0x0c, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x10, 0x00, // ..s_iblBrdfLut..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, // .........s_iblIr
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, // radianceMap.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, // ......s_iblEnvir
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // onmentMap.......
	0x00, 0x00, 0x00, 0x7c, 0x15, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, // ...|...#include 
	0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, // <metal_stdlib>.#
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, // include <simd/si
	0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, // md.h>..using nam
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, // espace metal;..s
	0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, // truct _Global.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x63, 0x6c, 0x69, //     float4 u_cli
	0x70, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // p;.    float4 u_
	0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x35, 0x5d, 0x3b, 0x0a, // pbrMaterial[5];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6c, 0x69, 0x67, //     float4 u_lig
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x33, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // hting[3];.    fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x7d, // oat4 u_ibl[1];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // lMain_out.{.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // float4 bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, // Data0 [[color(0)
	0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ]];.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, // latMtlMain_in.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x62, 0x69, 0x74, //     float3 v_bit
	0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, // angent [[user(lo
	0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // cn0)]];.    floa
	0x74, 0x33, 0x20, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x5b, 0x5b, 0x75, 0x73, // t3 v_normal [[us
	0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, // er(locn1)]];.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, //  float3 v_positi
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x32, 0x29, // on [[user(locn2)
	0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, // ]];.    float3 v
	0x5f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, // _tangent [[user(
	0x6c, 0x6f, 0x63, 0x6e, 0x33, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // locn3)]];.    fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2 v_texcoord0
	0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x34, 0x29, 0x5d, 0x5d, //  [[user(locn4)]]
	0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, // ;.};..fragment x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, // latMtlMain_out x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, // latMtlMain(xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, // tlMain_in in [[s
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // tage_in]], const
	0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, // ant _Global& _mt
	0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, // l_u [[buffer(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, // at> s_albedoText
	0x75, 0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, // ure [[texture(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, // oat> s_metallicR
	0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, // oughnessTexture 
	0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[texture(1)]], 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, // texture2d<float>
	0x20, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, //  s_emissiveTextu
	0x72, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x32, 0x29, 0x5d, // re [[texture(2)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, // at> s_aoTexture 
	0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[texture(3)]], 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, // texture2d<float>
	0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  s_normalTexture
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x34, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(4)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x20, 0x5b, // > s_iblBrdfLut [
	0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, // [texture(5)]], t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x63, 0x75, 0x62, 0x65, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // exturecube<float
	0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, // > s_iblIrradianc
	0x65, 0x4d, 0x61, 0x70, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x36, // eMap [[texture(6
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x63, 0x75, 0x62, 0x65, // )]], texturecube
	0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, // <float> s_iblEnv
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x20, 0x5b, 0x5b, 0x74, 0x65, // ironmentMap [[te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, // xture(7)]], samp
	0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, // ler s_albedoText
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // ureSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(0)]], sampl
	0x65, 0x72, 0x20, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, // er s_metallicRou
	0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, // ghnessTextureSam
	0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, // pler [[sampler(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x65, // )]], sampler s_e
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, // missiveTextureSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, // mpler [[sampler(
	0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, // 2)]], sampler s_
	0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // aoTextureSampler
	0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x33, 0x29, 0x5d, 0x5d, 0x2c, //  [[sampler(3)]],
	0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  sampler s_norma
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // lTextureSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x34, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(4)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, // sampler s_iblBrd
	0x66, 0x4c, 0x75, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // fLutSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x35, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, // mpler(5)]], samp
	0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, // ler s_iblIrradia
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, // nceMapSampler [[
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x36, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // sampler(6)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, // mpler s_iblEnvir
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // onmentMapSampler
	0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x37, 0x29, 0x5d, 0x5d, 0x29, //  [[sampler(7)]])
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, // .{.    xlatMtlMa
	0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, // in_out out = {};
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x6d, 0x74, // .    if (dot(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // l_u.u_clip, floa
	0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // t4(in.v_position
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, // , 1.0)) < 0.0). 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x69, 0x73, //    {.        dis
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x29, 0x3b, // card_fragment();
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .    }.    float
	0x32, 0x20, 0x5f, 0x39, 0x33, 0x34, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // 2 _934 = in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // xcoord0 * _mtl_u
	0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x31, // .u_pbrMaterial[1
	0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ].w;.    float4 
	0x5f, 0x31, 0x37, 0x35, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, // _1750;.    if (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, // mtl_u.u_pbrMater
	0x69, 0x61, 0x6c, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, // ial[3].x != 0.0)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, // .    {.        _
	0x31, 0x37, 0x35, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, // 1750 = s_albedoT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, // exture.sample(s_
	0x61, 0x6c, 0x62, 0x65, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, // albedoTextureSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x39, 0x33, 0x34, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // pler, _934) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, // tl_u.u_pbrMateri
	0x61, 0x6c, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // al[0];.    }.   
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //  else.    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, //     _1750 = _mtl
	0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, // _u.u_pbrMaterial
	0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, // [0];.    }.    i
	0x66, 0x20, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x30, 0x2e, 0x77, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x33, // f (_1750.w < 0.3
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x39, 0x32, 0x30, 0x39, 0x32, 0x38, 0x39, 0x35, // 0000001192092895
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 5078125).    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x66, //        discard_f
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // ragment();.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x31, 0x32, // .    float3 _112
	0x35, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x30, 0x2e, 0x78, // 5 = powr(_1750.x
	0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x32, 0x30, 0x30, // yz, float3(2.200
	0x30, 0x30, 0x30, 0x30, 0x34, 0x37, 0x36, 0x38, 0x33, 0x37, 0x31, 0x35, 0x38, 0x32, 0x30, 0x33, // 0000476837158203
	0x31, 0x32, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 125));.    float
	0x33, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, // 3 _1751;.    if 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, // (_mtl_u.u_pbrMat
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x34, 0x5d, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // erial[4].z != 0.
	0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0).    {.       
	0x20, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, //  _1751 = fast::n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, // ormalize(((s_nor
	0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // malTexture.sampl
	0x65, 0x28, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // e(s_normalTextur
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x39, 0x33, 0x34, 0x29, 0x2e, // eSampler, _934).
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, // xyz * 2.0) - flo
	0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x74, 0x72, 0x61, 0x6e, // at3(1.0)) * tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x66, // spose(float3x3(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, // ast::normalize(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x66, 0x61, // n.v_tangent), fa
	0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, // st::normalize(in
	0x2e, 0x76, 0x5f, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x29, 0x2c, 0x20, 0x66, // .v_bitangent), f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, // ast::normalize(i
	0x6e, 0x2e, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // n.v_normal))));.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, //     }.    else. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, //    {.        _17
	0x35, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // 51 = fast::norma
	0x6c, 0x69, 0x7a, 0x65, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // lize(in.v_normal
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // );.    }.    flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x31, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x6d, 0x65, // at4 _1168 = s_me
	0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, // tallicRoughnessT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, // exture.sample(s_
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, // metallicRoughnes
	0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // sTextureSampler,
	0x20, 0x5f, 0x39, 0x33, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  _934);.    floa
	0x74, 0x20, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // t _1000 = (_mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, // u.u_pbrMaterial[
	0x33, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3f, 0x20, 0x28, // 3].y != 0.0) ? (
	0x5f, 0x31, 0x31, 0x36, 0x38, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // _1168.z * _mtl_u
	0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x31, // .u_pbrMaterial[1
	0x5d, 0x2e, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, // ].x) : _mtl_u.u_
	0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x31, 0x5d, 0x2e, 0x78, // pbrMaterial[1].x
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x31, // ;.    float4 _11
	0x37, 0x37, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x63, 0x52, // 77 = s_metallicR
	0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, // oughnessTexture.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x69, // sample(s_metalli
	0x63, 0x52, 0x6f, 0x75, 0x67, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, // cRoughnessTextur
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x39, 0x33, 0x34, 0x29, 0x3b, // eSampler, _934);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x34, // .    float _1014
	0x20, 0x3d, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, //  = (_mtl_u.u_pbr
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x33, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, // Material[3].y !=
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x5f, 0x31, 0x31, 0x37, 0x37, 0x2e, 0x79, //  0.0) ? (_1177.y
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, //  * _mtl_u.u_pbrM
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x29, 0x20, 0x3a, 0x20, // aterial[1].y) : 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, // _mtl_u.u_pbrMate
	0x72, 0x69, 0x61, 0x6c, 0x5b, 0x31, 0x5d, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // rial[1].y;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x36, 0x20, 0x3d, 0x20, 0x73, 0x5f, // loat4 _1186 = s_
	0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // aoTexture.sample
	0x28, 0x73, 0x5f, 0x61, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, // (s_aoTextureSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x39, 0x33, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ler, _934);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x32, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x5f, // float _1028 = (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, // mtl_u.u_pbrMater
	0x69, 0x61, 0x6c, 0x5b, 0x34, 0x5d, 0x2e, 0x79, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, // ial[4].y != 0.0)
	0x20, 0x3f, 0x20, 0x28, 0x5f, 0x31, 0x31, 0x38, 0x36, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x5f, 0x6d, //  ? (_1186.x * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, // tl_u.u_pbrMateri
	0x61, 0x6c, 0x5b, 0x31, 0x5d, 0x2e, 0x7a, 0x29, 0x20, 0x3a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // al[1].z) : _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x70, 0x62, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5b, // u.u_pbrMaterial[
	0x31, 0x5d, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 1].z;.    float3
	0x20, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, //  _1035 = fast::n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // ormalize(_mtl_u.
	0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, // u_lighting[0].xy
	0x7a, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // z - in.v_positio
	0x6e, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // n);.    float3 _
	0x31, 0x37, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, // 1753;.    if (_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, // tl_u.u_lighting[
	0x30, 0x5d, 0x2e, 0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // 0].w != 0.0).   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  {.        float
	0x33, 0x20, 0x5f, 0x31, 0x30, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // 3 _1044 = fast::
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // normalize(_mtl_u
	0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x31, 0x5d, 0x2e, 0x78, // .u_lighting[1].x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // yz);.        flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x33, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, // at3 _1321 = mix(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x33, 0x39, 0x39, 0x39, 0x39, 0x39, // float3(0.0399999
	0x39, 0x39, 0x31, 0x30, 0x35, 0x39, 0x33, 0x30, 0x33, 0x32, 0x38, 0x33, 0x36, 0x39, 0x31, 0x34, // 9910593032836914
	0x30, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x66, 0x6c, // 0625), _1125, fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // oat3(_1000));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x32, //       float3 _12
	0x33, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // 30 = fast::norma
	0x6c, 0x69, 0x7a, 0x65, 0x28, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x20, 0x2b, 0x20, 0x5f, 0x31, 0x30, // lize(_1035 + _10
	0x34, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 44);.        flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x33, 0x33, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x33, 0x32, // at3 _1333 = _132
	0x31, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, // 1 + ((float3(1.0
	0x29, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x33, 0x32, 0x31, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // ) - _1321) * pow
	0x72, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x31, 0x2e, // r(fast::clamp(1.
	0x30, 0x20, 0x2d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, // 0 - fast::max(do
	0x74, 0x28, 0x5f, 0x31, 0x32, 0x33, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x29, 0x2c, // t(_1230, _1035),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, //  0.0), 0.0, 1.0)
	0x2c, 0x20, 0x35, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , 5.0));.       
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x33, 0x34, 0x33, 0x20, 0x3d, 0x20, 0x5f, //  float _1343 = _
	0x31, 0x30, 0x31, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x34, 0x3b, 0x0a, 0x20, 0x20, // 1014 * _1014;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x33, 0x35, //       float _135
	0x30, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, // 0 = fast::max(do
	0x74, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x32, 0x33, 0x30, 0x29, 0x2c, // t(_1751, _1230),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, //  0.0);.        f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x33, 0x35, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // loat _1359 = fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x33, 0x35, 0x30, // t::max(fma(_1350
	0x20, 0x2a, 0x20, 0x5f, 0x31, 0x33, 0x35, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, //  * _1350, fma(_1
	0x33, 0x34, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x33, 0x34, 0x33, 0x2c, 0x20, 0x2d, 0x31, 0x2e, 0x30, // 343, _1343, -1.0
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, // ), 1.0), 9.99999
	0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, // 9747378751635551
	0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x3b, // 4526367188e-05);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // .        float _
	0x31, 0x33, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // 1379 = fast::max
	0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x33, // (dot(_1751, _103
	0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5), 0.0);.      
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x33, 0x38, 0x33, 0x20, 0x3d, 0x20, //   float _1383 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, // fast::max(dot(_1
	0x37, 0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x34, 0x34, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 751, _1044), 0.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // );.        float
	0x20, 0x5f, 0x31, 0x33, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x34, 0x20, 0x2b, //  _1398 = _1014 +
	0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //  1.0;.        fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x34, 0x30, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x33, 0x39, // oat _1401 = _139
	0x38, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x33, 0x39, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 8 * _1398;.     
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x36, 0x20, 0x3d, //    float _1416 =
	0x20, 0x5f, 0x31, 0x30, 0x31, 0x34, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, //  _1014 + 1.0;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x34, 0x31, //       float _141
	0x39, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x36, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x34, 0x31, // 9 = _1416 * _141
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, // 6;.        _1753
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  = ((fma(((float
	0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x33, 0x33, 0x33, 0x29, 0x20, // 3(1.0) - _1333) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x29, 0x29, // * (1.0 - _1000))
	0x20, 0x2a, 0x20, 0x5f, 0x31, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, //  * _1125, float3
	0x28, 0x30, 0x2e, 0x33, 0x31, 0x38, 0x33, 0x30, 0x39, 0x38, 0x37, 0x33, 0x33, 0x34, 0x32, 0x35, // (0.3183098733425
	0x31, 0x34, 0x30, 0x33, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x28, // 140380859375), (
	0x5f, 0x31, 0x33, 0x33, 0x33, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x28, 0x5f, 0x31, 0x33, 0x34, 0x33, // _1333 * (((_1343
	0x20, 0x2a, 0x20, 0x5f, 0x31, 0x33, 0x34, 0x33, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x28, 0x33, 0x2e, //  * _1343) / ((3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x37, 0x34, 0x31, 0x30, 0x31, 0x32, 0x35, 0x37, 0x33, 0x32, // 1415927410125732
	0x34, 0x32, 0x31, 0x38, 0x37, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x33, 0x35, 0x39, 0x29, 0x20, // 421875 * _1359) 
	0x2a, 0x20, 0x5f, 0x31, 0x33, 0x35, 0x39, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x31, // * _1359)) * ((_1
	0x33, 0x38, 0x33, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x33, 0x38, 0x33, 0x2c, // 383 / fma(_1383,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x31, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x31, //  fma(-_1419, 0.1
	0x32, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x31, 0x39, 0x20, // 25, 1.0), _1419 
	0x2a, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x31, 0x33, // * 0.125)) * (_13
	0x37, 0x39, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x31, 0x33, 0x37, 0x39, 0x2c, 0x20, // 79 / fma(_1379, 
	0x66, 0x6d, 0x61, 0x28, 0x2d, 0x5f, 0x31, 0x34, 0x30, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, // fma(-_1401, 0.12
	0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x34, 0x30, 0x31, 0x20, 0x2a, // 5, 1.0), _1401 *
	0x20, 0x30, 0x2e, 0x31, 0x32, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x20, 0x2f, 0x20, 0x66, 0x6c, //  0.125))))) / fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x34, 0x2e, 0x30, 0x20, 0x2a, 0x20, 0x66, // oat3(fma(4.0 * f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x37, // ast::max(dot(_17
	0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // 51, _1035), 0.0)
	0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, // , fast::max(dot(
	0x5f, 0x31, 0x37, 0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x34, 0x34, 0x29, 0x2c, 0x20, 0x30, // _1751, _1044), 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, // .0), 9.999999747
	0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, // 3787516355514526
	0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x20, 0x2a, 0x20, // 367188e-05))) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, // _mtl_u.u_lightin
	0x67, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, // g[2].xyz) * fast
	0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x2c, // ::max(dot(_1751,
	0x20, 0x5f, 0x31, 0x30, 0x34, 0x34, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2b, //  _1044), 0.0)) +
	0x20, 0x28, 0x28, 0x5f, 0x31, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, //  ((_1125 * _mtl_
	0x75, 0x2e, 0x75, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5b, 0x32, 0x5d, 0x2e, // u.u_lighting[2].
	0x77, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x30, 0x32, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // w) * _1028);.   
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, //  }.    else.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x20, // {.        _1753 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // = float3(0.0);. 
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, //    }.    float3 
	0x5f, 0x31, 0x37, 0x35, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, // _1754;.    if (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x30, 0x5d, 0x2e, 0x78, // mtl_u.u_ibl[0].x
	0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //  != 0.0).    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, //        float3 _1
	0x35, 0x34, 0x37, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 547 = mix(float3
	0x28, 0x30, 0x2e, 0x30, 0x33, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x30, 0x35, 0x39, // (0.0399999991059
	0x33, 0x30, 0x33, 0x32, 0x38, 0x33, 0x36, 0x39, 0x31, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x2c, // 30328369140625),
	0x20, 0x5f, 0x31, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, //  _1125, float3(_
	0x31, 0x30, 0x30, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1000));.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x20, 0x3d, 0x20, 0x5f, // float3 _1564 = _
	0x31, 0x35, 0x34, 0x37, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // 1547 + ((fast::m
	0x61, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(float3(1.0 - 
	0x5f, 0x31, 0x30, 0x31, 0x34, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x35, 0x34, 0x37, 0x29, 0x20, 0x2d, // _1014), _1547) -
	0x20, 0x5f, 0x31, 0x35, 0x34, 0x37, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, //  _1547) * powr(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ast::clamp(1.0 -
	0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, //  fast::max(dot(_
	0x31, 0x37, 0x35, 0x31, 0x2c, 0x20, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, // 1751, _1035), 0.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x35, // 0), 0.0, 1.0), 5
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // .0));.        fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x36, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x73, 0x5f, 0x69, // oat4 _1604 = s_i
	0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // blBrdfLut.sample
	0x28, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x42, 0x72, 0x64, 0x66, 0x4c, 0x75, 0x74, 0x53, 0x61, 0x6d, // (s_iblBrdfLutSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x66, 0x61, 0x73, // pler, float2(fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x31, 0x37, 0x35, 0x31, // t::max(dot(_1751
	0x2c, 0x20, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // , _1035), 0.0), 
	0x5f, 0x31, 0x30, 0x31, 0x34, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _1014));.       
	0x20, 0x5f, 0x31, 0x37, 0x35, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x20, 0x2b, //  _1754 = _1753 +
	0x20, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, //  (fma(((float3(1
	0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x35, 0x36, 0x34, 0x29, 0x20, 0x2a, 0x20, 0x28, // .0) - _1564) * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x29, 0x29, 0x20, 0x2a, 0x20, // 1.0 - _1000)) * 
	0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, 0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, // s_iblIrradianceM
	0x61, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x49, // ap.sample(s_iblI
	0x72, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, // rradianceMapSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, // ler, _1751).xyz,
	0x20, 0x5f, 0x31, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, //  _1125, s_iblEnv
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x70, // ironmentMap.samp
	0x6c, 0x65, 0x28, 0x73, 0x5f, 0x69, 0x62, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, // le(s_iblEnvironm
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, // entMapSampler, r
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x2d, 0x5f, 0x31, 0x30, 0x33, 0x35, 0x2c, 0x20, 0x5f, // eflect(-_1035, _
	0x31, 0x37, 0x35, 0x31, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x5f, 0x31, 0x30, // 1751), level(_10
	0x31, 0x34, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x28, 0x69, 0x6e, 0x74, 0x28, 0x5f, // 14 * float(int(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x75, 0x5f, 0x69, 0x62, 0x6c, 0x5b, 0x30, 0x5d, 0x2e, 0x79, // mtl_u.u_ibl[0].y
	0x29, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x31, 0x35, // )))).xyz * ((_15
	0x36, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x36, 0x30, 0x34, 0x2e, 0x78, 0x29, 0x20, 0x2b, 0x20, // 64 * _1604.x) + 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x36, 0x30, 0x34, 0x2e, 0x79, 0x29, 0x29, // float3(_1604.y))
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x30, 0x32, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ) * _1028);.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x34, 0x20, 0x3d, // .        _1754 =
	0x20, 0x5f, 0x31, 0x37, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //  _1753;.    }.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, // ata0 = float4(_1
	0x37, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x73, 0x5f, 0x65, 0x6d, 0x69, // 754 + powr(s_emi
	0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x61, 0x6d, // ssiveTexture.sam
	0x70, 0x6c, 0x65, 0x28, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x65, // ple(s_emissiveTe
	0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, // xtureSampler, in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x2e, 0x78, 0x79, // .v_texcoord0).xy
	0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x32, 0x2e, 0x32, 0x30, 0x30, 0x30, // z, float3(2.2000
	0x30, 0x30, 0x30, 0x34, 0x37, 0x36, 0x38, 0x33, 0x37, 0x31, 0x35, 0x38, 0x32, 0x30, 0x33, 0x31, // 0004768371582031
	0x32, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x31, 0x37, 0x35, 0x30, 0x2e, 0x77, 0x29, 0x3b, 0x0a, // 25)), _1750.w);.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xa0, 0x01,                                                       // }......
};
