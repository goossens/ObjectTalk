#!/bin/bash
#
#	ObjectTalk Scripting Language
#	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
#
#	This work is licensed under the terms of the MIT license.
#	For a copy, see <https://opensource.org/licenses/MIT>.

shopt -s nullglob

SHADERC=~/bin/shaderc
FORCE=0

SHADER_INCLUDES=""
SHADER_DEFINES=""
SHADER_BAT=""

while [ $# -gt 0 ]
do
	case $1 in
		-f|--force)
			FORCE=1
			shift
			;;
		*)
			echo "Invalid parameter [$1]"
			exit
	esac
done


#
#	needsUpdate
#

function needsUpdate() {
	SOURCE_FILE=$1
	GROUP_NAME=$(dirname ${SOURCE_FILE})
	SOURCE_NAME=$(basename ${SOURCE_FILE})
	SHADER_NAME=${SOURCE_NAME%.*}
	COMPILED_FILE=generated/${GROUP_NAME}/${SHADER_NAME}_mtl.h

	if [ ${FORCE} -eq 1 ]
	then
		true

	elif [ ! -f ${COMPILED_FILE} ]
	then
		true

	elif [ ${SOURCE_FILE} -nt ${COMPILED_FILE} ]
	then
		true

	elif [ ${NEWEST_INCLUDE} -nt ${COMPILED_FILE} ]
	then
		true

	else
		false
	fi
}


#
#	processShader
#

function compileShader() {
	# get calling parameters
	FILE=$1
	TYPE=$2
	PLATFORM=$3
	PROFILE=$4
	ID=$5

	# extract names
	GROUP=$(dirname ${FILE})
	SOURCE=$(basename ${FILE})
	SHADER=${SOURCE%.*}

	# ensure directory exists
	mkdir -p generated/${GROUP}

	# is this a shader for windows?
	if [ ${PLATFORM} == "windows" ]
	then
		# yes, sadly it is, so just add a command to the batch script
		SHADER_BAT+="%HOMEDRIVE%%HOMEPATH%\\\\bin\\\\shaderc -f ${GROUP}\\\\${SOURCE} -o generated\\\\${GROUP}\\\\${SHADER}_${ID}.h -i include --type ${TYPE} --platform ${PLATFORM} --profile ${PROFILE} -O 3 --bin2c ${SHADER}_${ID}\n"

		# ensure a dummy file exists so we can continue to develop on MacOS and Linux
		if [ -f generated/${GROUP}/${SHADER}_mtl.h -a ! -f generated/${GROUP}/${SHADER}_dx11.h ]
		then
			sed "s/_mtl/_$2/" <generated/${GROUP}/${SHADER}_mtl.h >generated/${GROUP}/${SHADER}_dx11.h
		fi

	else
		# no hallelujah, it's not for windows so just compile the shader (if required)
		${SHADERC} -f ${FILE} -o generated/${GROUP}/${SHADER}_${ID}.h -i include --type ${TYPE} --platform ${PLATFORM} --profile ${PROFILE} --bin2c ${SHADER}_${ID}
	fi

	# add compiled shader to lisy of include files
	SHADER_INCLUDES+="#include \"generated/${GROUP}/${SHADER}_${ID}.h\"\n"
}


#
#	Main
#

# goto shaders directory and ensure output path exists
cd -P "$(dirname "${BASH_SOURCE[0]}")"
mkdir -p generated

# determine newest include file
	for FILE in include/*.glsl
	do
		if [ ${FILE} -nt "${NEWEST_INCLUDE}" ]
		then
			NEWEST_INCLUDE=${FILE}
		fi
	done

# process all shader groups
for DEF_PATH in */varying.def.sc
do
	GROUP_NAME=$(dirname ${DEF_PATH})

	# process all vertex shaders
	for SHADER_PATH in ${GROUP_NAME}/*VS.glsl
	do
		if needsUpdate ${SHADER_PATH}
		then
			echo "--------------------------------------- Compiling ${SHADER_PATH%.*}"
			compileShader ${SHADER_PATH} vertex osx metal mtl
			compileShader ${SHADER_PATH} vertex linux 120 glsl
			compileShader ${SHADER_PATH} vertex linux spirv spv
			compileShader ${SHADER_PATH} vertex android 100_es essl
			compileShader ${SHADER_PATH} vertex windows s_5_0 dx11
			SHADER_SOURCE=$(basename ${SHADER_PATH})
			SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(${SHADER_SOURCE%.*}),\n"
		fi
	done

	# process all fragment shaders
	for SHADER_PATH in ${GROUP_NAME}/*FS.glsl
	do
		if needsUpdate ${SHADER_PATH}
		then
			echo "--------------------------------------- Compiling ${SHADER_PATH%.*}"
			compileShader ${SHADER_PATH} fragment osx metal mtl
			compileShader ${SHADER_PATH} fragment linux 120 glsl
			compileShader ${SHADER_PATH} fragment linux spirv spv
			compileShader ${SHADER_PATH} fragment android 100_es essl
			compileShader ${SHADER_PATH} fragment windows s_5_0 dx11
			SHADER_SOURCE=$(basename ${SHADER_PATH})
			SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(${SHADER_SOURCE%.*}),\n"
		fi
	done

	# process all compute shaders
	for SHADER_PATH in ${GROUP_NAME}/*CS.glsl
	do
		if needsUpdate ${SHADER_PATH}
		then
			echo "--------------------------------------- Compiling ${SHADER_PATH%.*}"
			compileShader ${SHADER_PATH} compute osx metal mtl
			compileShader ${SHADER_PATH} compute linux 430 glsl
			compileShader ${SHADER_PATH} compute linux spirv spv
			compileShader ${SHADER_PATH} compute android 300_es essl
			compileShader ${SHADER_PATH} compute windows s_5_0 dx11
			SHADER_SOURCE=$(basename ${SHADER_PATH})
			SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(${SHADER_SOURCE%.*}),\n"
		fi
	done
done

# create master shader include file
cat >OtShaders.h <<END
//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


#pragma once


//
//	Include files
//

#include "bgfx/embedded_shader.h"

$(echo -e ${SHADER_INCLUDES})


//
//	Globals
//

static const bgfx::EmbeddedShader embeddedShaders[] = {
$(echo -e ${SHADER_DEFINES})
	BGFX_EMBEDDED_SHADER_END()
};
END

# create shader update script for windows
cat >update.bat <<END
::	ObjectTalk Scripting Language
::	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
::
::	This work is licensed under the terms of the MIT license.
::	For a copy, see <https://opensource.org/licenses/MIT>.


pushd "%~dp0"

$(echo -e ${SHADER_BAT})

popd
END
