#!/bin/bash
#
#	ObjectTalk Scripting Language
#	Copyright (c) 1993-2024 Johan A. Goossens. All rights reserved.
#
#	This work is licensed under the terms of the MIT license.
#	For a copy, see <https://opensource.org/licenses/MIT>.

shopt -s nullglob

SHADERC=~/bin/shaderc
FORCE=0

SHADER_INCLUDES=""
SHADER_DUMMIES=""
SHADER_DEFINES=""
SHADER_BAT=""

while [ $# -gt 0 ]
do
	case $1 in
		-f|--force)
			FORCE=1
			shift
			;;
		*)
			echo "Invalid parameter [$1]"
			exit
	esac
done


#
#	needsUpdate
#

function needsUpdate() {
	SOURCE_FILE=$1
	TARGET_FILE=$2

	if [ ${FORCE} -eq 1 ]
	then
		true

	elif [ ! -f ${TARGET_FILE} ]
	then
		true

	elif [ ${SOURCE_FILE} -nt ${TARGET_FILE} ]
	then
		true

	elif [ ${NEWEST_INCLUDE} -nt ${TARGET_FILE} ]
	then
		true

	else
		false
	fi
}


#
#	defineShader
#

function defineShader() {
	# get calling parameter
	SOURCE=$1

	# extract names
	BASENAME=$(basename ${SOURCE})
	SHADER=${BASENAME%.*}

	# create dummy shaders for OpenGL and OpenGLES
	SHADER_DUMMIES+="static const uint8_t ${SHADER}_glsl[1] = {0};\n"
	SHADER_DUMMIES+="static const uint8_t ${SHADER}_essl[1] = {0};\n"

	# add shader to list of include files and defines
	SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(${SHADER}),\n"
}


#
#	compileShader
#

function compileShader() {
	# get calling parameters
	SOURCE=$1
	TYPE=$2
	PLATFORM=$3
	PROFILE=$4
	ID=$5

	# extract names
	GROUP=$(dirname ${SOURCE})
	BASENAME=$(basename ${SOURCE})
	SHADER=${BASENAME%.*}
	TARGET=generated/${GROUP}/${SHADER}_${ID}.h

	# ensure directory exists
	mkdir -p generated/${GROUP}

	# is this a shader for windows?
	if [ ${PLATFORM} == "windows" ]
	then
		# yes, sadly it is, ensure a dummy shader exists so we can continue to develop on MacOS and Linux
		if [ -f generated/${GROUP}/${SHADER}_mtl.h -a ! -f ${TARGET} ]
		then
			echo "------------- Generating ${GROUP}/${SHADER}_${ID}.h"
			sed "s/_mtl/_${ID}/" <generated/${GROUP}/${SHADER}_mtl.h >${TARGET}
		fi

		# add shader to batch script
		SHADER_BAT+="%HOMEDRIVE%%HOMEPATH%\\bin\\shaderc -f ${GROUP}\\${BASENAME} -o generated\\${GROUP}\\${SHADER}_${ID}.h -i include --type ${TYPE} --platform ${PLATFORM} --profile ${PROFILE} -O 3 --bin2c ${SHADER}_${ID}\n"

	else
		# no, hallelujah, it's not for windows so just compile the shader (if required)
		if needsUpdate ${SOURCE} ${TARGET}
		then
			echo "------------- Generating ${GROUP}/${SHADER}_${ID}.h"
			${SHADERC} -f ${SOURCE} -o ${TARGET} -i include --type ${TYPE} --platform ${PLATFORM} --profile ${PROFILE} --bin2c ${SHADER}_${ID}
		fi
	fi

	# add shader to list of include files
	SHADER_INCLUDES+="#include \"${TARGET}\"\n"
}


#
#	Main
#

# goto shaders directory and ensure output path exists
cd -P "$(dirname "${BASH_SOURCE[0]}")"
mkdir -p generated

# determine newest include file
	for INCLUDE in include/*.glsl
	do
		if [ ${INCLUDE} -nt "${NEWEST_INCLUDE}" ]
		then
			NEWEST_INCLUDE=${INCLUDE}
		fi
	done

# process all shader groups
for DEF_PATH in */varying.def.sc
do
	GROUP_NAME=$(dirname ${DEF_PATH})

	# process all vertex shaders
	for SHADER_PATH in ${GROUP_NAME}/*VS.glsl
	do
		compileShader ${SHADER_PATH} vertex osx metal mtl
		compileShader ${SHADER_PATH} vertex linux spirv spv
		compileShader ${SHADER_PATH} vertex windows s_5_0 dx11
		defineShader ${SHADER_PATH}
	done

	# process all fragment shaders
	for SHADER_PATH in ${GROUP_NAME}/*FS.glsl
	do
		compileShader ${SHADER_PATH} fragment osx metal mtl
		compileShader ${SHADER_PATH} fragment linux spirv spv
		compileShader ${SHADER_PATH} fragment windows s_5_0 dx11
		defineShader ${SHADER_PATH}
	done

	# process all compute shaders
	for SHADER_PATH in ${GROUP_NAME}/*CS.glsl
	do
		compileShader ${SHADER_PATH} compute osx metal mtl
		compileShader ${SHADER_PATH} compute linux spirv spv
		compileShader ${SHADER_PATH} compute windows s_5_0 dx11
		defineShader ${SHADER_PATH}
	done
done

# create master shader include file
cat <<END | sed -e 's/\\n/\n/g' -e 's/\\t/\t/g' >OtShaders.cpp
//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2024 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	Include files
//

#include "bgfx/embedded_shader.h"

#include "OtLog.h"

#include "OtShaders.h"
${SHADER_INCLUDES}


//
//	Globals
//

${SHADER_DUMMIES}

static const bgfx::EmbeddedShader embeddedShaders[] = {
${SHADER_DEFINES}
	BGFX_EMBEDDED_SHADER_END()
};


//
//	OtShaders::get
//

bgfx::ShaderHandle OtShaders::get(const char* name) {
	bgfx::RendererType::Enum type = bgfx::getRendererType();
	auto shader = bgfx::createEmbeddedShader(embeddedShaders, type, name);

	if (!bgfx::isValid(shader)) {
		OtLogFatal("Internal error: unknown shader [{}]", name);
	}

	return shader;
}
END

# create shader update script for windows
cat <<END | sed 's/\\n/\n/g' >update.bat
::	ObjectTalk Scripting Language
::	Copyright (c) 1993-2024 Johan A. Goossens. All rights reserved.
::
::	This work is licensed under the terms of the MIT license.
::	For a copy, see <https://opensource.org/licenses/MIT>.


pushd "%~dp0"

${SHADER_BAT}
popd
END
