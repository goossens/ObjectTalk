#!/bin/bash
#
#	ObjectTalk Scripting Language
#	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
#
#	This work is licensed under the terms of the MIT license.
#	For a copy, see <https://opensource.org/licenses/MIT>.

SHADERC=~/bin/shaderc
HOME="$(cd -P "$(dirname "${BASH_SOURCE[0]}")"; pwd)"
FORCE=0

SHADER_INCLUDES=""
SHADER_DEFINES=""
SHADER_BAT=""

while [ $# -gt 0 ]
do
	case $1 in
		-f|--force)
			FORCE=1
			shift
			;;
		*)
			echo "Invalid parameter [$1]"
			exit
	esac
done


#
#	needsUpdate
#

function needsUpdate() {
	if [ ${FORCE} -eq 1 ]
	then
		true

	elif [ ! -f ${HOME}/generated/Ot$1Shader.h ]
	then
		true

	elif [ $2 -nt $3 ]
	then
		true

	else
		unset -v NEWEST_INCLUDE

		for FILE in ${HOME}/include/*.glsl
		do
			if [ ${FILE} -nt "${NEWEST_INCLUDE}" ]
			then
				NEWEST_INCLUDE=${FILE}
			fi
		done

		if [ ${NEWEST_INCLUDE} -nt $3 ]
		then
			true

		else
			false
		fi
	fi
}


#
#	fakePart
#

function fakePart() {
	if [ -f $1_mtl.h -a ! -f $1_$2.h ]
	then
		sed "s/_mtl/_$2/" <$1_mtl.h >$1_$2.h
	fi
}


#
#	processShader
#

function processShader() {
	case $1 in
		vertex) EXT=vs;;
		fragment) EXT=fs;;
	esac

	if [ $2 == "instancing" ]
	then
		PREFIX=${EXT}i

	else
		PREFIX=${EXT}
	fi

	UPREFIX=$(echo "${PREFIX}" |  tr '[:lower:]' '[:upper:]')

	if needsUpdate $3 $2.${EXT} ${HOME}/generated/$3/${PREFIX}_mtl.h
	then
		echo "--------------------------------------- Compiling $1 $2 $3"
		${SHADERC} -f $2.${EXT} -o ${HOME}/generated/$3/${PREFIX}_mtl.h -i ${HOME}/include --type $1 --platform osx -p metal -O 3 --bin2c Ot$3${UPREFIX}_mtl
		${SHADERC} -f $2.${EXT} -o ${HOME}/generated/$3/${PREFIX}_glsl.h -i ${HOME}/include --type $1 --platform linux -p 120 --bin2c Ot$3${UPREFIX}_glsl
		${SHADERC} -f $2.${EXT} -o ${HOME}/generated/$3/${PREFIX}_essl.h -i ${HOME}/include --type $1 --platform linux -p 100_es --bin2c Ot$3${UPREFIX}_essl
		${SHADERC} -f $2.${EXT} -o ${HOME}/generated/$3/${PREFIX}_spv.h -i ${HOME}/include --type $1 --platform linux -p spirv --bin2c Ot$3${UPREFIX}_spv
		fakePart ${HOME}/generated/$3/${PREFIX} dx11
	fi

	SHADER_BAT+="%HOMEDRIVE%%HOMEPATH%\\\\bin\\\\shaderc -f $3\\\\$2.${EXT} -o generated\\\\$3\\\\${PREFIX}_dx11.h -i include --type $1 --platform windows -p s_5_0 -O 3 --bin2c Ot$3${UPREFIX}_dx11\n"
}


#
#	processDirectory
#

function processDirectory() {
	SHADER_INCLUDES+="#include \"generated/Ot$1Shader.h\"\n"

	mkdir -p ${HOME}/generated/$1
	cd ${HOME}/$1

	if [ -f shader.vs ]
	then
		processShader vertex shader $1
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1VS),\n"
	fi

	if [ -f shader.fs ]
	then
		processShader fragment shader $1
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1FS),\n"
	fi

	if [ -f instancing.vs ]
	then
		processShader vertex instancing $1
		SHADER_DEFINES+="\tBGFX_EMBEDDED_SHADER(Ot$1VSI),\n"
	fi

	SHADER_BAT+="\n"

	cat >${HOME}/generated/Ot$1Shader.h <<END
//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


//
//	Include files
//

#include "$1/vs_mtl.h"
#include "$1/vs_glsl.h"
#include "$1/vs_essl.h"
#include "$1/vs_spv.h"
#include "$1/vs_dx11.h"

#include "$1/fs_mtl.h"
#include "$1/fs_glsl.h"
#include "$1/fs_essl.h"
#include "$1/fs_spv.h"
#include "$1/fs_dx11.h"
END

	if [ -f instancing.vs ]
	then
		cat >>${HOME}/generated/Ot$1Shader.h <<END

#include "$1/vsi_mtl.h"
#include "$1/vsi_glsl.h"
#include "$1/vsi_essl.h"
#include "$1/vsi_spv.h"
#include "$1/vsi_dx11.h"
END

	fi

	cd ${HOME}
}


#
#	Main
#

cd ${HOME}
mkdir -p generated

for P in */varying.def.sc
do
	processDirectory $(dirname ${P})
done

cat >${HOME}//OtShaders.h <<END
//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.


#pragma once


//
//	Include files
//

#include "bgfx/embedded_shader.h"

$(echo -e ${SHADER_INCLUDES})


//
//	Globals
//

static const bgfx::EmbeddedShader embeddedShaders[] = {
$(echo -e ${SHADER_DEFINES})
	BGFX_EMBEDDED_SHADER_END()
};
END

cat >${HOME}/update.bat <<END
::	ObjectTalk Scripting Language
::	Copyright (c) 1993-2023 Johan A. Goossens. All rights reserved.
::
::	This work is licensed under the terms of the MIT license.
::	For a copy, see <https://opensource.org/licenses/MIT>.


pushd "%~dp0"

$(echo -e ${SHADER_BAT})

popd
END
