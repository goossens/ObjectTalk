//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2024 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

var path = Path("/var/lib/test.a");
assert(path.string() == "/var/lib/test.a");
assert(path.rootName() == "");
assert(path.rootDirectory() == "/");
assert(path.rootPath() == "/");
assert(path.directory() == "/var/lib");
assert(path.filename() == "test.a");
assert(path.stem() == "test");
assert(path.extension() == ".a");

path = Path("../test.a");
assert(path.string() == "../test.a");
assert(path.directory() == "..");

path.clear();
assert(path == "");

assert(Path("test.a").directory() == "");
assert(Path("").directory() == "");
assert(Path("/").directory() == "/");

path = Path("/var/lib/test.a");
path.removeFilename();
assert(path == "/var/lib/");

path = Path("/var/lib/test.a");
path.replaceFilename("test.cpp");
assert(path == "/var/lib/test.cpp");
path.replaceExtension(".o");
assert(path == "/var/lib/test.o");

assert(Path("/crazy/lib/test.a").exists() == false);
assert(Path("").isEmpty() == true);
assert(Path("/var/lib/test.a").isEmpty() == false);

if (os.sysname() == "Windows_NT") {
	assert(Path("C:/var/lib/test.a").isAbsolute() == true);
	assert(Path("/var/lib/test.a").isAbsolute() == false);
	assert(Path("var/lib/test.a").isAbsolute() == false);
	assert(Path("C:/var/lib/test.a").isRelative() == false);
	assert(Path("/var/lib/test.a").isRelative() == true);
	assert(Path("var/lib/test.a").isRelative() == true);

} else {
	assert(Path("/var/lib/test.a").isAbsolute() == true);
	assert(Path("var/lib/test.a").isAbsolute() == false);
	assert(Path("/var/lib/test.a").isRelative() == false);
	assert(Path("var/lib/test.a").isRelative() == true);
}

assert(Path("/var/lib/test.a").hasRootPath() == true);
assert(Path("var/lib/test.a").hasRootPath() == false);
assert(Path("/var/lib/test.a").hasRootName() == false);
assert(Path("var/lib/test.a").hasRootName() == false);
assert(Path("/var/lib/test.a").hasRootDirectory() == true);
assert(Path("var/lib/test.a").hasRootDirectory() == false);

assert(Path("/var/lib/test.a").hasRelativePath() == true);
assert(Path("var/lib/test.a").hasRelativePath() == true);

assert(Path("/var/lib/test.a").hasParentPath() == true);
assert(Path("var/lib/test.a").hasParentPath() == true);
assert(Path("./test.a").hasParentPath() == true);
assert(Path("test.a").hasParentPath() == false);

assert(Path("/var/lib/test.a").hasFilename() == true);
assert(Path("./test.a").hasFilename() == true);
assert(Path("test.a").hasFilename() == true);
assert(Path("./aa/").hasFilename() == false);

assert(Path("/var/lib/test.a").hasStem() == true);
assert(Path("/var/lib/test").hasStem() == true);
assert(Path("/var/lib/").hasStem() == false);

assert(Path("/var/lib/test.a").hasExtension() == true);
assert(Path("/var/lib/test").hasExtension() == false);
assert(Path("/var/lib/").hasExtension() == false);
